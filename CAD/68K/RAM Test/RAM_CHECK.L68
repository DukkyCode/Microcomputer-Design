00000008 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 4/12/2022 3:27:15 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68k Homebrew ROM Monitor
00000000                             3  * Written by : Hayden Kroepfl (ChartreuseK)
00000000                             4  * Date       : August 24th 2015
00000000                             5  * Description: A simple ROM monitor for my homebrew 68k
00000000                             6  *              breadboard computer.
00000000                             7  *-----------------------------------------------------------
00000000                             8  *
00000000                             9  * To make this responsive to different terminal widths we need to change the number of bytes printed
00000000                            10  * on a line from 16, which fits exactly on a 72 column screen, to an ammount based on a formula.
00000000                            11  *  Sizes: 
00000000                            12  *   Address:      "000000: " 8
00000000                            13  *   Each Byte:    "00 "      3
00000000                            14  *   Start ASCII:  "|"        1
00000000                            15  *   Each ASCII:   "."        1
00000000                            16  *   End ASCII:    "|"        1
00000000                            17  *
00000000                            18  *   Width = 8 + numBytes*(3 + 1) + 2
00000000                            19  *   numBytes = (Width - 10)/4 = (Width - 10)>>2
00000000                            20  *  Examples:
00000000                            21  *    (80 - 10)/4 = 70/4 = 16 Bytes
00000000                            22  *    (40 - 10)/4 = 30/4 =  7 Bytes
00000000                            23  *    (32 - 10)/4 = 22/4 =  5 Bytes
00000000                            24  * On small screens we should not show the start and end characters on the ASCII section
00000000                            25  * 40 Characters wide or less
00000000                            26  *    (40 - 8)/4  = 32/4 =  8 Bytes
00000000                            27  *    (32 - 8)/4  = 24/4 =  6 Bytes
00000000                            28  
00000000  =00000000                 29  SIM                 EQU         0
00000000                            30  
00000000  123C 0000                 31                      MOVE.B      #$00, D1
00000004  103C 000C                 32                      MOVE.B      #12, D0
00000008  4E4F                      33                      TRAP        #15
0000000A                            34  
0000000A                            35  **********************************
0000000A                            36  * Defines
0000000A                            37  *
0000000A  =00040000                 38  RAM_START           equ     $40000
0000000A  =00044000                 39  RAM_END             equ     $44000
0000000A  =00000050                 40  MAX_LINE_LENGTH     equ     80
0000000A                            41  
0000000A                            42  *********************************
0000000A                            43  * 68681 Duart Register Addresses
0000000A                            44  *
0000000A  =001C0000                 45  DUART equ $1C0000       * Base Addr of DUART
0000000A  =001C0000                 46  MRA   equ DUART+0       * Mode Register A           (R/W)
0000000A  =001C0002                 47  SRA   equ DUART+2       * Status Register A         (r)
0000000A  =001C0002                 48  CSRA  equ DUART+2       * Clock Select Register A   (w)
0000000A  =001C0004                 49  CRA   equ DUART+4       * Commands Register A       (w)
0000000A  =001C0006                 50  RBA   equ DUART+6       * Receiver Buffer A         (r)
0000000A  =001C0006                 51  TBA   equ DUART+6       * Transmitter Buffer A      (w)
0000000A  =001C0008                 52  ACR   equ DUART+8       * Aux. Control Register     (R/W)
0000000A  =001C000A                 53  ISR   equ DUART+10      * Interrupt Status Register (R)
0000000A  =001C000A                 54  IMR   equ DUART+10      * Interrupt Mask Register   (W)
0000000A  =001C0010                 55  MRB   equ DUART+16      * Mode Register B           (R/W)
0000000A  =001C0012                 56  SRB   equ DUART+18      * Status Register B         (R)
0000000A  =001C0012                 57  CSRB  equ DUART+18      * Clock Select Register B   (W)
0000000A  =001C0014                 58  CRB   equ DUART+20      * Commands Register B       (W)
0000000A  =001C0016                 59  RBB   equ DUART+22      * Reciever Buffer B         (R)
0000000A  =001C0016                 60  TBB   equ DUART+22      * Transmitter Buffer B      (W)
0000000A  =001C0018                 61  IVR   equ DUART+24      * Interrupt Vector Register (R/W)
0000000A                            62  
0000000A                            63  **********************************
0000000A                            64  * ASCII Control Characters
0000000A                            65  *
0000000A  =00000007                 66  BEL   equ $07
0000000A  =00000008                 67  BKSP  equ $08       * CTRL-H
0000000A  =00000009                 68  TAB   equ $09
0000000A  =0000000A                 69  LF    equ $0A
0000000A  =0000000D                 70  CR    equ $0D
0000000A  =0000001B                 71  ESC   equ $1B
0000000A                            72  
0000000A  =00000003                 73  CTRLC   EQU $03     
0000000A  =00000018                 74  CTRLX   EQU $18     * Line Clear
0000000A                            75  
0000000A                            76  
0000000A                            77  **********************************
0000000A                            78  * Variables
0000000A                            79  *
0000000A  =00043FFC                 80  varCurAddr  equ     RAM_END-4                        * Last address accessed
0000000A  =00043FAA                 81  varLineBuf  equ     varCurAddr-MAX_LINE_LENGTH-2     * Line buffer
0000000A                            82  
0000000A  =00043FAA                 83  varLast     equ     varLineBuf
0000000A                            84  
0000000A                            85  
0000000A                            86  **********************************
0000000A                            87  * Defines 2 
0000000A                            88  *
0000000A  =00043FAA                 89  STACK_START         equ     varLast
0000000A                            90                      
0000000A                            91  
0000000A                            92                      
0000000A                            93  
0000000A                            94  **** PROGRAM STARTS HERE ****
0000000A                            95      
00000000                            96      ORG     $0000
00000000                            97      
00000000                            98  **** FIRST 8 bytes loaded after reset ****
00000000= 00043FAA                  99      DC.l    STACK_START  * Supervisor stack pointer
00000004= 00000008                 100      DC.l    START        * Initial PC    
00000008                           101      
00000008                           102      
00000008                           103  ********************************************
00000008                           104  * Cold start entry point
00000008                           105  *
00000008                           106  START:
00000008  4FF9 00043FAA            107      lea     STACK_START, SP     * Set our stack pointer to be sure
0000000E  4EB9 000000FE            108      jsr     initDuart           * Setup the serial port
00000014                           109   
00000014                           110  ********************************************
00000014                           111  * Simple Ram Readback Test
00000014                           112  *    
00000014                           113  ramCheck:
00000014  41F9 00000201            114      lea     msgRamCheck, A0
0000001A  6100 0056                115      bsr.w   printString
0000001E  45F9 00040000            116      lea     RAM_START, A2
00000024                           117   .loop:
00000024  14BC 00AA                118      move.b  #$AA, (A2)   * First test with 10101010
00000028  0C12 00AA                119      cmp.b   #$AA, (A2)
0000002C  661E                     120      bne.s   .fail
0000002E  14BC 0055                121      move.b  #$55, (A2)   * Then with 01010101
00000032  0C12 0055                122      cmp.b   #$55, (A2)
00000036  6614                     123      bne.s   .fail
00000038  14BC 0000                124      move.b  #$00, (A2)   * And finally clear the memory
0000003C  0C1A 0000                125      cmp.b   #$00, (A2)+  * And move to the next byte
00000040  660A                     126      bne.s   .fail 
00000042  B5FC 00044000            127      cmp.l   #RAM_END, A2  
00000048  6DDA                     128      blt.s   .loop        * While we're still below the end of ram to check
0000004A  6016                     129      bra.s   .succ
0000004C                           130   .fail:                  * One of the bytes of RAM failed to readback test
0000004C  41F9 00000213            131      lea     msgRamFail, A0
00000052  6100 001E                132      bsr.w   printString
00000056  200A                     133      move.l  A2, D0
00000058  6100 0034                134      bsr.w   printHexLong * Print out the address that failed
0000005C  6100 000E                135      bsr.w   printNewline
00000060                           136   .haltloop:              * Sit forever in the halt loop
00000060  60FE                     137      bra.s   .haltloop
00000062                           138   .succ:                  * All bytes passed the readback test
00000062  41F9 0000021F            139      lea     msgRamPass, A0
00000068  6100 0008                140      bsr.w   printString
0000006C                           141      
0000006C                           142      
0000006C                           143   ******
0000006C                           144  * Prints a newline (CR, LF)
0000006C                           145  printNewline:
0000006C  41F9 00000229            146      lea     msgNewline, a0
00000072                           147  ******
00000072                           148  * Print a null terminated string
00000072                           149  *
00000072                           150  printString:
00000072                           151   .loop:
00000072  1018                     152      move.b  (a0)+, d0    * Read in character
00000074  6704                     153      beq.s   .end         * Check for the null
00000076                           154      
00000076  6162                     155      bsr.s   outChar      * Otherwise write the character
00000078  60F8                     156      bra.s   .loop        * And continue
0000007A                           157   .end:
0000007A  4E75                     158      rts
0000007C                           159  
0000007C                           160  ** KEEP All printHex functions together **
0000007C                           161  ******
0000007C                           162  * Print a hex word
0000007C                           163  printHexWord:
0000007C  2F02                     164      move.l  d2, -(SP)    * Save D2
0000007E  2400                     165      move.l  d0, d2       * Save the address in d2
00000080                           166      
00000080  E19A                     167      rol.l   #8, d2       * 4321 -> 3214
00000082  E19A                     168      rol.l   #8, d2       * 3214 -> 2143 
00000084  6018                     169      bra.s   printHex_wordentry  * Print out the last 16 bits
00000086                           170  *****
00000086                           171  * Print a hex 24-bit address
00000086                           172  printHexAddr:
00000086  2F02                     173      move.l d2, -(SP)     * Save D2
00000088  2400                     174      move.l d0, d2          * Save the address in d2
0000008A                           175      
0000008A  E19A                     176      rol.l   #8, d2       * 4321 -> 3214
0000008C  600A                     177      bra.s   printHex_addrentry  * Print out the last 24 bits
0000008E                           178  ******
0000008E                           179  * Print a hex long
0000008E                           180  printHexLong:
0000008E  2F02                     181      move.l  d2, -(SP)     * Save D2
00000090  2400                     182      move.l  d0, d2        * Save the address in d2
00000092                           183      
00000092  E19A                     184      rol.l   #8, d2        * 4321 -> 3214 high byte in low
00000094  2002                     185      move.l  d2, d0
00000096  6116                     186      bsr.s   printHexByte  * Print the high byte (24-31)
00000098                           187  printHex_addrentry:     
00000098  E19A                     188      rol.l   #8, d2        * 3214 -> 2143 middle-high byte in low
0000009A  2002                     189      move.l  d2, d0              
0000009C  6110                     190      bsr.s   printHexByte  * Print the high-middle byte (16-23)
0000009E                           191  printHex_wordentry:    
0000009E  E19A                     192      rol.l   #8, d2        * 2143 -> 1432 Middle byte in low
000000A0  2002                     193      move.l  d2, d0
000000A2  610A                     194      bsr.s   printHexByte  * Print the middle byte (8-15)
000000A4  E19A                     195      rol.l   #8, d2
000000A6  2002                     196      move.l  d2, d0
000000A8  6104                     197      bsr.s   printHexByte  * Print the low byte (0-7)
000000AA                           198      
000000AA  241F                     199      move.l (SP)+, d2      * Restore D2
000000AC  4E75                     200      RTS
000000AE                           201      
000000AE                           202  ******
000000AE                           203  * Print a hex byte
000000AE                           204  *  - Takes byte in D0
000000AE                           205  printHexByte:
000000AE  2F02                     206      move.l  D2, -(SP)
000000B0  1400                     207      move.b  D0, D2
000000B2  E808                     208      lsr.b   #$4, D0
000000B4  0600 0030                209      add.b   #'0', D0
000000B8  B03C 0039                210      cmp.b   #'9', D0     * Check if the hex number was from 0-9
000000BC  6F02                     211      ble.s   .second
000000BE  5E00                     212      add.b   #7, D0       * Shift 0xA-0xF from ':' to 'A'
000000C0                           213  .second:
000000C0  6118                     214      bsr.s   outChar      * Print the digit
000000C2  0202 000F                215      andi.b  #$0F, D2     * Now we want the lower digit Mask only the lower digit
000000C6  0602 0030                216      add.b   #'0', D2
000000CA  B43C 0039                217      cmp.b   #'9', D2     * Same as before    
000000CE  6F02                     218      ble.s   .end
000000D0  5E02                     219      add.b   #7, D2
000000D2                           220  .end:
000000D2  1002                     221      move.b  D2, D0
000000D4  6104                     222      bsr.s   outChar      * Print the lower digit
000000D6  241F                     223      move.l  (SP)+, D2
000000D8  4E75                     224      rts
000000DA                           225      
000000DA                           226      
000000DA                           227      
000000DA                           228      
000000DA                           229      
000000DA                           230      
000000DA                           231  *****
000000DA                           232  * Writes a character to Port A, blocking if not ready (Full buffer)
000000DA                           233  *  - Takes a character in D0
000000DA                           234  outChar:
000000DA  0839 0002 001C0002       235      btst    #2, SRA      * Check if transmitter ready bit is set
000000E2  67F6                     236      beq     outChar     
000000E4  13C0 001C0006            237      move.b  d0, TBA      * Transmit Character
000000EA  4E75                     238      rts
000000EC                           239  
000000EC                           240  *****
000000EC                           241  * Reads in a character from Port A, blocking if none available
000000EC                           242  *  - Returns character in D0
000000EC                           243  *    
000000EC                           244  inChar:
000000EC  0839 0000 001C0002       245      btst    #0,  SRA     * Check if receiver ready bit is set
000000F4  67F6                     246      beq     inChar
000000F6  1039 001C0006            247      move.b  RBA, d0      * Read Character into D0
000000FC  4E75                     248      rts
000000FE                           249      
000000FE                           250  *****
000000FE                           251  * Initializes the 68681 DUART port A as 9600 8N1 
000000FE                           252  initDuart:
000000FE  13FC 0030 001C0004       253      move.b  #$30, CRA       * Reset Transmitter
00000106  13FC 0020 001C0004       254      move.b  #$20, CRA       * Reset Reciever
0000010E  13FC 0010 001C0004       255      move.b  #$10, CRA       * Reset Mode Register Pointer
00000116                           256      
00000116  13FC 0080 001C0008       257      move.b  #$80, ACR       * Baud Rate Set #2
0000011E  13FC 00BB 001C0002       258      move.b  #$BB, CSRA      * Set Tx and Rx rates to 9600
00000126  13FC 0093 001C0000       259      move.b  #$93, MRA       * 7-bit, No Parity ($93 for 8-bit, $92 for 7-bit)
0000012E  13FC 0007 001C0000       260      move.b  #$07, MRA       * Normal Mode, Not CTS/RTS, 1 stop bit
00000136                           261      
00000136  13FC 0005 001C0004       262      move.b  #$05, CRA       * Enable Transmit/Recieve
0000013E  4E75                     263      rts    
00000140                           264  
00000140                           265  
00000140                           266  
00000140                           267  
00000140                           268  
00000140                           269  
00000140                           270  **********************************
00000140                           271  * Strings
00000140                           272  *
00000140                           273  msgBanner:
00000140= 0D 0A 43 68 61 72 ...    274      dc.b CR,LF,'Chartreuse''s 68000 ROM Monitor',CR,LF
00000162= 3D 3D 3D 3D 3D 3D ...    275      dc.b       '==============================',CR,LF,0
00000183                           276  msgHelp:
00000183= 41 76 61 69 6C 61 ...    277      dc.b 'Available Commands: ',CR,LF
00000199= 20 28 45 29 78 61 ...    278      dc.b ' (E)xamine    (D)eposit    (R)un     (H)elp',CR,LF,0
000001C7                           279  msgDepositPrompt:
000001C7= 3A 20 00                 280      dc.b ': ',0
000001CA                           281  msgPrompt:
000001CA= 3E 20 00                 282      dc.b '> ',0
000001CD                           283  msgInvalidCommand:
000001CD= 49 6E 76 61 6C 69 ...    284      dc.b 'Invalid Command',CR,LF,0
000001DF                           285  msgInvalidAddress:
000001DF= 49 6E 76 61 6C 69 ...    286      dc.b 'Invalid Address',CR,LF,0
000001F1                           287  msgInvalidValue:
000001F1= 49 6E 76 61 6C 69 ...    288      dc.b 'Invalid Value',CR,LF,0
00000201                           289  msgRamCheck:
00000201= 43 68 65 63 6B 69 ...    290      dc.b 'Checking RAM...',CR,LF,0
00000213                           291  msgRamFail:
00000213= 46 61 69 6C 65 64 ...    292      dc.b 'Failed at: ',0
0000021F                           293  msgRamPass:
0000021F= 50 61 73 73 65 64 ...    294      dc.b 'Passed.',CR,LF,0
00000229                           295  msgNewline:
00000229= 0D 0A 00                 296      dc.b CR,LF,0
0000022C                           297  msgColonSpace:
0000022C= 3A 20 00                 298      dc.b ': ',0
0000022F                           299  
0000022F                           300  
0000022F                           301  
0000022F                           302      END    START            * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACR                 1C0008
BEL                 7
BKSP                8
CR                  D
CRA                 1C0004
CRB                 1C0014
CSRA                1C0002
CSRB                1C0012
CTRLC               3
CTRLX               18
DUART               1C0000
ESC                 1B
IMR                 1C000A
INCHAR              EC
INITDUART           FE
ISR                 1C000A
IVR                 1C0018
LF                  A
MAX_LINE_LENGTH     50
MRA                 1C0000
MRB                 1C0010
MSGBANNER           140
MSGCOLONSPACE       22C
MSGDEPOSITPROMPT    1C7
MSGHELP             183
MSGINVALIDADDRESS   1DF
MSGINVALIDCOMMAND   1CD
MSGINVALIDVALUE     1F1
MSGNEWLINE          229
MSGPROMPT           1CA
MSGRAMCHECK         201
MSGRAMFAIL          213
MSGRAMPASS          21F
OUTCHAR             DA
PRINTHEXADDR        86
PRINTHEXBYTE        AE
PRINTHEXBYTE:END    D2
PRINTHEXBYTE:SECOND  C0
PRINTHEXLONG        8E
PRINTHEXWORD        7C
PRINTHEX_ADDRENTRY  98
PRINTHEX_WORDENTRY  9E
PRINTNEWLINE        6C
PRINTSTRING         72
PRINTSTRING:END     7A
PRINTSTRING:LOOP    72
RAMCHECK            14
RAMCHECK:FAIL       4C
RAMCHECK:HALTLOOP   60
RAMCHECK:LOOP       24
RAMCHECK:SUCC       62
RAM_END             44000
RAM_START           40000
RBA                 1C0006
RBB                 1C0016
SIM                 0
SRA                 1C0002
SRB                 1C0012
STACK_START         43FAA
START               8
TAB                 9
TBA                 1C0006
TBB                 1C0016
VARCURADDR          43FFC
VARLAST             43FAA
VARLINEBUF          43FAA
