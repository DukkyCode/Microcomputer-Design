00001F00 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 4/24/2022 10:11:56 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main Program
00000000                             3  * Written by : Duc Anh Nguyen
00000000                             4  * Date       : 4.9.2022
00000000                             5  * Description: Monitor Program for the 68k Microcontroller 
00000000                             6  *-----------------------------------------------------------
00000000                             7                 
00000000                             8  *=======================================================================
00000000                             9  *ASCII Control Characters
00000000  =00000020                 10  SPACE           EQU         $20
00000000  =00000008                 11  BS              EQU         $08
00000000  =0000000D                 12  CR              EQU         $0D
00000000  =0000000A                 13  LF              EQU         $0A
00000000                            14  *=======================================================================
00000000                            15  *Stack Pointer
00000000  =00013000                 16  STACK           EQU         $013000                         ; Stack Pointer, must point to RAM (grows down)
00000000  =00016500                 17  OUTPUT          EQU         $016500
00000000  =00016000                 18  INPUT           EQU         $016000
00000000  =00015500                 19  SRECSTART       EQU         $015500
00000000  =00015000                 20  SRECADDR        EQU         $015000
00000000                            21  
00000000                            22  *********************************
00000000                            23  * 68681 Duart Register Addresses
00000000  =00020000                 24  DUART           EQU         $020000       * Base Addr of DUART
00000000                            25  ; DUART sub-addresses
00000000  =00000001                 26  MRA             EQU         $1  ; Mode Register A   (if Reading)
00000000  =00000003                 27  SRA             EQU         $3  ; Status Register A (if Reading)
00000000  =00000003                 28  CSRA            EQU         $3  ; Clock Select Register A   (if Writing)
00000000  =00000005                 29  CRA             EQU         $5  ; Command Register A    (if Writing)
00000000  =00000007                 30  HRA             EQU         $7  ; Holding Register A (Rx if Read, Tx if Write)
00000000  =00000009                 31  ACR             EQU         $9  ; Auxiliary Control Register (if Writing)
00000000                            32  ; Other DUART definitions
00000000  =00000010                 33  MRA_rst         EQU         $10 ; Reset MRA pointer to MR1A
00000000  =00000020                 34  RxA_rst         EQU         $20 ; Software reset RxA
00000000  =00000030                 35  TxA_rst         EQU         $30 ; Software reset TxA
00000000  =00000005                 36  CR_Enabl        EQU         $05 ; Tx/Rx Enable
00000000  =00000080                 37  ACR_BAUD        EQU         $80 ; Use 2nd baud rate table (for speed 19.2k)
00000000  =000000CC                 38  CSR_BAUD        EQU         $CC ; Baud rate value = 19,200
00000000  =00000013                 39  MR1_Set         EQU         $13 ; 8-bits, no parity, 1 stop bit
00000000  =00000007                 40  MR2_Norm        EQU         $07 ; Normal mode, CTS/RTS disabled, stop bit length = 1
00000000  =00000047                 41  MR2_Echo        EQU         $47 ; Auto-echo, CTS/RTS disabled, stop bit length = 1
00000000                            42  
00000000  =00000000                 43  Rx_ready        EQU         $0  ; Recieve ready bit position
00000000  =00000002                 44  Tx_ready        EQU         $2  ; Transmit ready bit position
00000000                            45  
00000000                            46  *=======================================================================
00000000                            47  *Set Stack Counter and Initial Program Counter                                                                               
00000000                            48  *Starting of Monitor Program
00000000                            49                  ORG         $00000
00000000= 00013000                  50                  DC.L        STACK                           ;Set up Stack
00000004= 00001F00                  51                  DC.L        initDuart                       ;Set up PC
00000008                            52                  
00000008                            53  *Function Pointer                        
00000008                            54  COMMAND_ADDRESS:
00000008= 00002016                  55                  DC.L        MENU
0000000C= 00002026                  56                  DC.L        HELP            
00000010= 00002036                  57                  DC.L        RM 
00000014= 00002084                  58                  DC.L        WM
00000018= 000020B4                  59                  DC.L        RR
0000001C= 00002692                  60                  DC.L        WR
00000020= 000027F0                  61                  DC.L        LS
00000024= 0000288A                  62                  DC.L        RS
00000028                            63  
00001F00                            64                  ORG         $001F00                               
00001F00                            65  initDuart:
00001F00  4DF9 00020000             66                  LEA         DUART, A6   ; Put DUART address into A0
00001F06                            67                  ; Software_Reset
00001F06  1D7C 0010 0005            68                  MOVE.B      #MRA_rst, CRA(A6)   ; Reset MRA pointer
00001F0C  1D7C 0020 0005            69                  MOVE.B      #RxA_rst, CRA(A6)   ; Reset RxA
00001F12  1D7C 0030 0005            70                  MOVE.B      #TxA_rst, CRA(A6)   ; Reset TxA
00001F18                            71                  ; Initialization
00001F18  1D7C 0080 0009            72                  MOVE.B  #ACR_BAUD,  ACR(A6) ; Selects baud rate set 2
00001F1E  1D7C 00CC 0003            73                  MOVE.B  #CSR_BAUD, CSRA(A6) ; Set 19.2k baud Rx/Tx
00001F24  1D7C 0013 0001            74                  MOVE.B  #MR1_Set,   MRA(A6) ; 8-bits, no parity, 1 stop bit
00001F2A                            75                  ; MR2_Echo for auto-echo, swap for MR2_Norm to run normally
00001F2A  1D7C 0007 0001            76                  MOVE.B  #MR2_Norm, MRA(A6)  ; Set Duart to normal mode
00001F30  1D7C 0005 0005            77                  MOVE.B  #CR_Enabl, CRA(A6)  ; Enable both Tx and Rx on channel A
00001F36                            78                  
00001F36  2F08                      79                  MOVE.L      A0, -(SP)                            ;Pushing A0 to the Stack
00001F38                            80                  
00001F38  307C 29A8                 81                  MOVEA       #MONITOR, A0                         ;Print out menu
00001F3C  6100 09B0                 82                  BSR         OUTCHAR    
00001F40                            83   
00001F40  307C 2D77                 84                  MOVEA       #NEWLINE, A0                         ;Print new Line
00001F44  6100 09A8                 85                  BSR         OUTCHAR               
00001F48                            86                  
00001F48  205F                      87                  MOVE.L      (SP)+, A0                            ;Popping A0 from the stack
00001F4A                            88  
00001F4A                            89  *=======================================================================
00001F4A                            90  *A0: Input Buffer
00001F4A                            91  *A1: Output Buffer
00001F4A                            92  *Main program
00001F4A                            93  MAIN:            
00001F4A  207C 00010000             94                  MOVE.L      #$010000, A0
00001F50                            95                                                 
00001F50  2F08                      96                  MOVE.L      A0, -(SP)                            ;Pushing A0 to the Stack
00001F52                            97  
00001F52                            98  SPACE_LOOP0:                
00001F52  10FC 0020                 99                  MOVE.B      #SPACE, (A0)+
00001F56  5202                     100                  ADDI.B      #$01, D2
00001F58  0C02 0016                101                  CMPI.B      #$16, D2
00001F5C  66F4                     102                  BNE         SPACE_LOOP0              
00001F5E                           103  
00001F5E  205F                     104                  MOVE.L      (SP)+, A0                            ;Popping A0 from the stack 
00001F60                           105  
00001F60  7400                     106                  MOVE.L      #$00, D2                             ;Reset D2
00001F62                           107  
00001F62  2F0C                     108                  MOVE.L      A4, -(SP)                            ;Push A4               
00001F64                           109                  
00001F64  49F9 00016500            110                  LEA         OUTPUT, A4
00001F6A                           111  SPACE_LOOP4:    
00001F6A  18FC 0020                112                  MOVE.B      #SPACE, (A4)+
00001F6E  5202                     113                  ADDI.B      #$01, D2
00001F70  0C02 0024                114                  CMPI.B      #$24, D2
00001F74  66F4                     115                  BNE         SPACE_LOOP4
00001F76                           116  
00001F76  285F                     117                  MOVE.L      (SP)+, A4                            ;Pop A4     
00001F78                           118  
00001F78  7400                     119                  MOVE.L      #$00, D2
00001F7A                           120                                 
00001F7A  2F08                     121                  MOVE.L      A0, -(SP)                            ;Pushing A0 to the Stack
00001F7C                           122                  
00001F7C  307C 2D77                123                  MOVEA       #NEWLINE, A0                         ;Print new Line
00001F80  6100 096C                124                  BSR         OUTCHAR
00001F84                           125                      
00001F84  307C 2CDC                126                  MOVEA       #PROMPT, A0                          ;Main Prompt
00001F88  6100 0964                127                  BSR         OUTCHAR
00001F8C                           128                  
00001F8C  205F                     129                  MOVE.L      (SP)+, A0                            ;Popping A1 from the stack
00001F8E                           130                 
00001F8E  6100 092E                131                  BSR         INCHAR                               ;Getting input from the user
00001F92                           132  
00001F92  2F0A                     133                  MOVE.L      A2, -(SP)
00001F94  2F0B                     134                  MOVE.L      A3, -(SP)                     
00001F96                           135                         
00001F96  45F9 00002AB5            136                  LEA         COMMAND_LIST, A2                     ;Load command table into A2
00001F9C  47F8 0008                137                  LEA         COMMAND_ADDRESS, A3                  ;Load command address into A3              
00001FA0                           138  
00001FA0                           139  *=======================================================================
00001FA0                           140  *Input Handler
00001FA0                           141  INPUT_HANDLER:
00001FA0                           142  
00001FA0                           143  LOOP:
00001FA0  B508                     144                  CMPM.B       (A0)+, (A2)+
00001FA2  6600 0018                145                  BNE          POP
00001FA6                           146                  
00001FA6  0C10 0020                147                  CMPI.B       #SPACE, (A0)
00001FAA  66F4                     148                  BNE          LOOP
00001FAC                           149  
00001FAC  0C12 0020                150                  CMPI.B       #SPACE, (A2)
00001FB0  6600 09E6                151                  BNE          ARGUMENT_ERROR
00001FB4                           152                                 
00001FB4  2A53                     153                  MOVE.L      (A3), A5
00001FB6                           154                  
00001FB6  265F                     155                  MOVE.L      (SP)+, A3
00001FB8  245F                     156                  MOVE.L      (SP)+, A2
00001FBA                           157                  
00001FBA  4ED5                     158                  JMP         (A5) 
00001FBC                           159                                                                                                                                                           
00001FBC                           160  POP:
00001FBC  207C 00010000            161                  MOVE.L      #$010000, A0                           ;Pop A0
00001FC2                           162  
00001FC2                           163  FIND_NEXT:
00001FC2  0C1A 0000                164                  CMPI.B      #$00, (A2)+                         ;Find the next character in the list
00001FC6  66FA                     165                  BNE         FIND_NEXT
00001FC8  584B                     166                  ADD         #$04, A3                            ;Find the location of the next command                
00001FCA  B4FC 2AD8                167                  CMPA        #MENU_HELP, A2                      ;Hardcode the end of your program
00001FCE  6E00 09C8                168                  BGT         ARGUMENT_ERROR                      ;If reach the argument length
00001FD2                           169                  
00001FD2  4EF8 1FA0                170                  JMP         INPUT_HANDLER
00001FD6                           171  
00001FD6                           172  *=======================================================================
00001FD6                           173  *Argument Handler
00001FD6                           174  GET_ARG:
00001FD6  5248                     175                  ADD         #$01, A0
00001FD8  0C10 0024                176                  CMPI.B      #$24, (A0)
00001FDC  6600 09BA                177                  BNE         ARGUMENT_ERROR
00001FE0  7E00                     178                  MOVEQ       #$00, D7
00001FE2  7C00                     179                  MOVEQ       #$00, D6
00001FE4                           180  ADD_ARG:
00001FE4  5248                     181                  ADD         #$01, A0
00001FE6  E99F                     182                  ROL.L       #4, D7
00001FE8  DE86                     183                  ADD.L       D6, D7
00001FEA  1C18                     184                  MOVE.B      (A0)+, D6
00001FEC  0C06 0039                185                  CMPI.B      #$39, D6
00001FF0  6F00 0004                186                  BLE         NUM
00001FF4  5F06                     187                  SUBQ.B      #$07,D6
00001FF6                           188  
00001FF6                           189  NUM:
00001FF6  0406 0030                190                  SUB.B       #$30, D6
00001FFA  0C20 0000                191                  CMPI.B      #$00, -(A0)
00001FFE  6700 0014                192                  BEQ         GOT_ARG
00002002  0C10 0020                193                  CMPI.B      #SPACE, (A0)
00002006  6700 000C                194                  BEQ         GOT_ARG
0000200A  0C10 003B                195                  CMPI.B      #$3B, (A0)
0000200E  6700 0004                196                  BEQ         GOT_ARG
00002012  60D0                     197                  BRA         ADD_ARG
00002014                           198                  
00002014                           199  GOT_ARG:
00002014  4E75                     200                  RTS
00002016                           201  
00002016                           202  *======================================================================
00002016                           203  *======================================================================
00002016                           204  *Subfunction of the main program                               
00002016                           205  *Menu Sub-function
00002016                           206  MENU:
00002016  2F08                     207                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
00002018                           208                  
00002018  307C 2A10                209                  MOVEA       #MENU_LIST,A0                       ;Print Menu List
0000201C  6100 08D0                210                  BSR         OUTCHAR               
00002020                           211                  
00002020  205F                     212                  MOVE.L      (SP)+, A0                          ;Popping A0 to the Stack
00002022                           213                  
00002022  4EF8 1F4A                214                  JMP         MAIN
00002026                           215                  
00002026                           216  *Help Sub-function
00002026                           217  HELP:
00002026  2F08                     218                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
00002028                           219                
00002028  307C 2AD8                220                  MOVEA       #MENU_HELP,A0                       ;Print Menu Help
0000202C  6100 08C0                221                  BSR         OUTCHAR               
00002030                           222                  
00002030  205F                     223                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack
00002032                           224                  
00002032  4EF8 1F4A                225                  JMP         MAIN
00002036                           226  
00002036                           227  
00002036                           228  *======================================================================
00002036                           229  *Read from Memory Sub-fucntion
00002036                           230  RM:
00002036  4EB8 1FD6                231                  JSR         GET_ARG
0000203A                           232                                  
0000203A  7200                     233                  MOVEQ       #$00, D1
0000203C  207C 00010000            234                  MOVE.L      #$010000, A0                        ;Reset A0
00002042                           235                  
00002042  2F08                     236                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
00002044                           237                
00002044  307C 2CDF                238                  MOVEA       #CONTENTS,A0                       ;Print Output
00002048  6100 08A4                239                  BSR         OUTCHAR               
0000204C                           240                  
0000204C  205F                     241                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack
0000204E                           242  
0000204E                           243                  
0000204E  2047                     244                  MOVE.L      D7, A0
00002050                           245                  
00002050  4EB9 00002942            246                  JSR         OUTHEX                              ;Print 1st byte
00002056                           247                  
00002056  5248                     248                  ADD         #$01, A0                            ;Print 2nd byte                
00002058  4EB9 00002942            249                  JSR         OUTHEX
0000205E                           250                  
0000205E  5248                     251                  ADD         #$01, A0                            ;Print 3rd byte                
00002060  4EB9 00002942            252                  JSR         OUTHEX
00002066                           253                  
00002066  5248                     254                  ADD         #$01, A0                            ;Print 4 byte                
00002068  4EB9 00002942            255                  JSR         OUTHEX
0000206E                           256                                            
0000206E  207C 00000000            257                  MOVE.L      #$00, A0
00002074                           258                  
00002074  2F08                     259                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
00002076                           260                
00002076  307C 2D77                261                  MOVEA       #NEWLINE,A0                         ;Print Output
0000207A  6100 0872                262                  BSR         OUTCHAR               
0000207E                           263                  
0000207E  205F                     264                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack
00002080                           265                               
00002080  4EF8 1F4A                266                  JMP         MAIN
00002084                           267                                                              
00002084                           268  *======================================================================                
00002084                           269  *Write from Memory Sub-fucntion
00002084                           270  WM:                  
00002084  4EB8 1FD6                271                  JSR         GET_ARG
00002088                           272                  
00002088  2F09                     273                  MOVE.L      A1, -(SP)
0000208A  2F0A                     274                  MOVE.L      A2, -(SP)
0000208C                           275                  
0000208C  45F9 00016000            276                  LEA         INPUT, A2
00002092                           277                  
00002092  2487                     278                  MOVE.L      D7, (A2)
00002094                           279                                  
00002094  4EB8 1FD6                280                  JSR         GET_ARG
00002098                           281                  
00002098  2247                     282                  MOVE.L      D7, A1
0000209A                           283                  
0000209A  2292                     284                  MOVE.L      (A2), (A1)
0000209C                           285                                            
0000209C  307C 2CEC                286                  MOVEA       #OUTPUT_WM ,A0                      ;Print Output
000020A0  6100 084C                287                  BSR         OUTCHAR
000020A4                           288  
000020A4  307C 2D77                289                  MOVEA       #NEWLINE,A0                         ;Print New Line
000020A8  6100 0844                290                  BSR         OUTCHAR               
000020AC                           291                  
000020AC  245F                     292                  MOVE.L      (SP)+, A2
000020AE  225F                     293                  MOVE.L      (SP)+, A1
000020B0                           294           
000020B0  4EF8 1F4A                295                  JMP         MAIN
000020B4                           296  
000020B4                           297  *======================================================================
000020B4                           298  *Read from Register Sub-fucntion
000020B4                           299  RR:
000020B4  5248                     300                  ADD         #$01, A0                            ;Reset Addresss Register  
000020B6                           301  REGISTER_CHECK:                
000020B6  0C10 0041                302                  CMPI.B      #$41, (A0)
000020BA  6700 000E                303                  BEQ         RR_A
000020BE  0C10 0044                304                  CMPI.B      #$44, (A0)
000020C2  6700 005C                305                  BEQ         RR_D
000020C6  6000 08D0                306                  BRA         ARGUMENT_ERROR
000020CA                           307                 
000020CA                           308  RR_A:
000020CA                           309                  *Condition Checking
000020CA  5248                     310                  ADD         #$01, A0
000020CC  0C10 0030                311                  CMPI.B      #$30, (A0)
000020D0  6D00 08C6                312                  BLT         ARGUMENT_ERROR
000020D4  0C10 0037                313                  CMPI.B      #$37, (A0)
000020D8  6E00 08BE                314                  BGT         ARGUMENT_ERROR
000020DC                           315                  
000020DC                           316                  *Address Register Checking
000020DC  0C10 0030                317                  CMPI.B      #$30, (A0)
000020E0  6700 0300                318                  BEQ         READA0
000020E4                           319                  
000020E4  0C10 0031                320                  CMPI.B      #$31, (A0)
000020E8  6700 034E                321                  BEQ         READA1
000020EC                           322                  
000020EC  0C10 0032                323                  CMPI.B      #$32, (A0)
000020F0  6700 039C                324                  BEQ         READA2
000020F4                           325                  
000020F4  0C10 0033                326                  CMPI.B      #$33, (A0)
000020F8  6700 03EA                327                  BEQ         READA3
000020FC                           328                  
000020FC  0C10 0034                329                  CMPI.B      #$34, (A0)
00002100  6700 0438                330                  BEQ         READA4
00002104                           331                  
00002104  0C10 0035                332                  CMPI.B      #$35, (A0)
00002108  6700 0486                333                  BEQ         READA5
0000210C                           334                  
0000210C  0C10 0036                335                  CMPI.B      #$36, (A0)
00002110  6700 04D4                336                  BEQ         READA6
00002114                           337                  
00002114  0C10 0037                338                  CMPI.B      #$37, (A0)
00002118  6700 0522                339                  BEQ         READA7
0000211C                           340                  
0000211C  4EF8 1F4A                341                  JMP         MAIN                                 
00002120                           342  
00002120                           343  RR_D:
00002120                           344                  *Condition Checking
00002120  5248                     345                  ADD         #$01, A0
00002122  0C10 0030                346                  CMPI.B      #$30, (A0)
00002126  6D00 0870                347                  BLT         ARGUMENT_ERROR
0000212A  0C10 0037                348                  CMPI.B      #$37, (A0)
0000212E  6E00 0868                349                  BGT         ARGUMENT_ERROR
00002132                           350                  
00002132                           351                  *Data Register Checking               
00002132  0C10 0030                352                  CMPI.B      #$30, (A0)
00002136  6700 003A                353                  BEQ         READD0
0000213A                           354                  
0000213A  0C10 0031                355                  CMPI.B      #$31, (A0)
0000213E  6700 0080                356                  BEQ         READD1
00002142                           357                  
00002142  0C10 0032                358                  CMPI.B      #$32, (A0)
00002146  6700 00C6                359                  BEQ         READD2
0000214A                           360                  
0000214A  0C10 0033                361                  CMPI.B      #$33, (A0)
0000214E  6700 010C                362                  BEQ         READD3
00002152                           363                  
00002152  0C10 0034                364                  CMPI.B      #$34, (A0)
00002156  6700 0152                365                  BEQ         READD4
0000215A                           366                  
0000215A  0C10 0035                367                  CMPI.B      #$35, (A0)
0000215E  6700 0198                368                  BEQ         READD5
00002162                           369                  
00002162  0C10 0036                370                  CMPI.B      #$36, (A0)
00002166  6700 01DE                371                  BEQ         READD6
0000216A                           372                  
0000216A  0C10 0037                373                  CMPI.B      #$37, (A0)
0000216E  6700 0224                374                  BEQ         READD7
00002172                           375                                        
00002172                           376  *======================================================================
00002172                           377  *Read from Register function
00002172                           378  READD0:
00002172  2F00                     379                  MOVE.L      D0, -(SP)                   ;Push D0
00002174                           380                  
00002174  45F9 00016000            381                  LEA         INPUT, A2
0000217A  207C 00010000            382                  MOVE.L      #$010000, A0                 ;Reset A0
00002180                           383                  
00002180  2F08                     384                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002182                           385                
00002182  307C 2CDF                386                  MOVEA       #CONTENTS,A0                ;Print Output
00002186  6100 0766                387                  BSR         OUTCHAR               
0000218A                           388                  
0000218A  205F                     389                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
0000218C                           390                  
0000218C                           391  
0000218C  2480                     392                  MOVE.L      D0, (A2)                   
0000218E                           393                  
0000218E  109A                     394                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
00002190  4EB9 00002942            395                  JSR         OUTHEX
00002196                           396  
00002196  109A                     397                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
00002198  4EB9 00002942            398                  JSR         OUTHEX
0000219E                           399                  
0000219E  109A                     400                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
000021A0  4EB9 00002942            401                  JSR         OUTHEX
000021A6                           402                  
000021A6  1092                     403                  MOVE.B      (A2), (A0)                  ;1st Byte                              
000021A8  4EB9 00002942            404                  JSR         OUTHEX
000021AE                           405                           
000021AE  201F                     406                  MOVE.L      (SP)+, D0                   ;Pop D0
000021B0                           407                  
000021B0  2F08                     408                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000021B2                           409                
000021B2  307C 2D77                410                  MOVEA       #NEWLINE,A0                 ;Print Output
000021B6  6100 0736                411                  BSR         OUTCHAR               
000021BA                           412                  
000021BA  205F                     413                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000021BC                           414  
000021BC                           415  
000021BC  4EF8 1F4A                416                  JMP         MAIN
000021C0                           417  
000021C0                           418  READD1:
000021C0  2F01                     419                  MOVE.L      D1, -(SP)                   ;Push D0
000021C2                           420                  
000021C2  45F9 00016000            421                  LEA         INPUT, A2
000021C8  207C 00010000            422                  MOVE.L      #$010000, A0                    ;Reset A0
000021CE                           423                  
000021CE  2F08                     424                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000021D0                           425                
000021D0  307C 2CDF                426                  MOVEA       #CONTENTS,A0                ;Print Output
000021D4  6100 0718                427                  BSR         OUTCHAR               
000021D8                           428                  
000021D8  205F                     429                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000021DA                           430                  
000021DA                           431  
000021DA  2481                     432                  MOVE.L      D1, (A2)                   
000021DC                           433                  
000021DC  109A                     434                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
000021DE  4EB9 00002942            435                  JSR         OUTHEX
000021E4                           436  
000021E4  109A                     437                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
000021E6  4EB9 00002942            438                  JSR         OUTHEX
000021EC                           439                  
000021EC  109A                     440                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
000021EE  4EB9 00002942            441                  JSR         OUTHEX
000021F4                           442                  
000021F4  1092                     443                  MOVE.B      (A2), (A0)                  ;1st Byte                              
000021F6  4EB9 00002942            444                  JSR         OUTHEX
000021FC                           445                           
000021FC  221F                     446                  MOVE.L      (SP)+, D1                   ;Pop D0
000021FE                           447  
000021FE  2F08                     448                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002200                           449                
00002200  307C 2D77                450                  MOVEA       #NEWLINE,A0                 ;Print Output
00002204  6100 06E8                451                  BSR         OUTCHAR               
00002208                           452                  
00002208  205F                     453                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
0000220A                           454  
0000220A                           455                  
0000220A  4EF8 1F4A                456                  JMP         MAIN
0000220E                           457  
0000220E                           458  READD2:
0000220E  2F02                     459                  MOVE.L      D2, -(SP)                   ;Push D0
00002210                           460                  
00002210  45F9 00016000            461                  LEA         INPUT, A2
00002216  207C 00010000            462                  MOVE.L      #$010000, A0                    ;Reset A0
0000221C                           463                  
0000221C  2F08                     464                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
0000221E                           465                
0000221E  307C 2CDF                466                  MOVEA       #CONTENTS,A0                ;Print Output
00002222  6100 06CA                467                  BSR         OUTCHAR               
00002226                           468                  
00002226  205F                     469                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002228                           470                  
00002228                           471  
00002228  2482                     472                  MOVE.L      D2, (A2)                   
0000222A                           473                  
0000222A  109A                     474                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
0000222C  4EB9 00002942            475                  JSR         OUTHEX
00002232                           476  
00002232  109A                     477                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
00002234  4EB9 00002942            478                  JSR         OUTHEX
0000223A                           479                  
0000223A  109A                     480                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
0000223C  4EB9 00002942            481                  JSR         OUTHEX
00002242                           482                  
00002242  1092                     483                  MOVE.B      (A2), (A0)                  ;1st Byte                              
00002244  4EB9 00002942            484                  JSR         OUTHEX
0000224A                           485                           
0000224A  241F                     486                  MOVE.L      (SP)+, D2                   ;Pop D0
0000224C                           487                  
0000224C  2F08                     488                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
0000224E                           489                
0000224E  307C 2D77                490                  MOVEA       #NEWLINE,A0                 ;Print Output
00002252  6100 069A                491                  BSR         OUTCHAR               
00002256                           492                  
00002256  205F                     493                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002258                           494                                                 
00002258  4EF8 1F4A                495                  JMP         MAIN
0000225C                           496  
0000225C                           497  READD3:
0000225C  2F03                     498                  MOVE.L      D3, -(SP)                   ;Push D0
0000225E                           499                  
0000225E  45F9 00016000            500                  LEA         INPUT, A2
00002264  207C 00010000            501                  MOVE.L      #$010000, A0                    ;Reset A0
0000226A                           502                  
0000226A  2F08                     503                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
0000226C                           504                
0000226C  307C 2CDF                505                  MOVEA       #CONTENTS,A0                ;Print Output
00002270  6100 067C                506                  BSR         OUTCHAR               
00002274                           507                  
00002274  205F                     508                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002276                           509                  
00002276                           510  
00002276  2483                     511                  MOVE.L      D3, (A2)                   
00002278                           512                  
00002278  109A                     513                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
0000227A  4EB9 00002942            514                  JSR         OUTHEX
00002280                           515  
00002280  109A                     516                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
00002282  4EB9 00002942            517                  JSR         OUTHEX
00002288                           518                  
00002288  109A                     519                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
0000228A  4EB9 00002942            520                  JSR         OUTHEX
00002290                           521                  
00002290  1092                     522                  MOVE.B      (A2), (A0)                  ;1st Byte                              
00002292  4EB9 00002942            523                  JSR         OUTHEX
00002298                           524                           
00002298  261F                     525                  MOVE.L      (SP)+, D3                   ;Pop D0
0000229A                           526                  
0000229A  2F08                     527                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
0000229C                           528                
0000229C  307C 2D77                529                  MOVEA       #NEWLINE,A0                 ;Print Output
000022A0  6100 064C                530                  BSR         OUTCHAR               
000022A4                           531                  
000022A4  205F                     532                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000022A6                           533                  
000022A6  4EF8 1F4A                534                  JMP         MAIN
000022AA                           535  
000022AA                           536  READD4:
000022AA  2F04                     537                  MOVE.L      D4, -(SP)                   ;Push D0
000022AC                           538                  
000022AC  45F9 00016000            539                  LEA         INPUT, A2
000022B2  207C 00010000            540                  MOVE.L      #$010000, A0                    ;Reset A0
000022B8                           541                  
000022B8  2F08                     542                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000022BA                           543                
000022BA  307C 2CDF                544                  MOVEA       #CONTENTS,A0                ;Print Output
000022BE  6100 062E                545                  BSR         OUTCHAR               
000022C2                           546                  
000022C2  205F                     547                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000022C4                           548                  
000022C4                           549  
000022C4  2484                     550                  MOVE.L      D4, (A2)                   
000022C6                           551                  
000022C6  109A                     552                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
000022C8  4EB9 00002942            553                  JSR         OUTHEX
000022CE                           554  
000022CE  109A                     555                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
000022D0  4EB9 00002942            556                  JSR         OUTHEX
000022D6                           557                  
000022D6  109A                     558                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
000022D8  4EB9 00002942            559                  JSR         OUTHEX
000022DE                           560                  
000022DE  1092                     561                  MOVE.B      (A2), (A0)                  ;1st Byte                              
000022E0  4EB9 00002942            562                  JSR         OUTHEX
000022E6                           563                           
000022E6  281F                     564                  MOVE.L      (SP)+, D4                   ;Pop D0
000022E8                           565                  
000022E8  2F08                     566                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000022EA                           567                
000022EA  307C 2D77                568                  MOVEA       #NEWLINE,A0                 ;Print Output
000022EE  6100 05FE                569                  BSR         OUTCHAR               
000022F2                           570                  
000022F2  205F                     571                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000022F4                           572  
000022F4                           573                  
000022F4                           574                  
000022F4  4EF8 1F4A                575                  JMP         MAIN
000022F8                           576  
000022F8                           577  READD5:
000022F8  2F05                     578                  MOVE.L      D5, -(SP)                   ;Push D0
000022FA                           579                  
000022FA  45F9 00016000            580                  LEA         INPUT, A2
00002300  207C 00010000            581                  MOVE.L      #$010000, A0                    ;Reset A0
00002306                           582                  
00002306  2F08                     583                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002308                           584                
00002308  307C 2CDF                585                  MOVEA       #CONTENTS,A0                ;Print Output
0000230C  6100 05E0                586                  BSR         OUTCHAR               
00002310                           587                  
00002310  205F                     588                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002312                           589                  
00002312                           590  
00002312  2485                     591                  MOVE.L      D5, (A2)                   
00002314                           592                  
00002314  109A                     593                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
00002316  4EB9 00002942            594                  JSR         OUTHEX
0000231C                           595  
0000231C  109A                     596                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
0000231E  4EB9 00002942            597                  JSR         OUTHEX
00002324                           598                  
00002324  109A                     599                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
00002326  4EB9 00002942            600                  JSR         OUTHEX
0000232C                           601                  
0000232C  1092                     602                  MOVE.B      (A2), (A0)                  ;1st Byte                              
0000232E  4EB9 00002942            603                  JSR         OUTHEX
00002334                           604                           
00002334  2A1F                     605                  MOVE.L      (SP)+, D5                   ;Pop D0
00002336                           606                  
00002336  2F08                     607                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002338                           608                
00002338  307C 2D77                609                  MOVEA       #NEWLINE,A0                 ;Print Output
0000233C  6100 05B0                610                  BSR         OUTCHAR               
00002340                           611                  
00002340  205F                     612                  MOVE.L      (SP)+, A0                    ;Popping A0 to the Stack
00002342                           613  
00002342                           614                  
00002342  4EF8 1F4A                615                  JMP         MAIN
00002346                           616  
00002346                           617  READD6:
00002346  2F06                     618                  MOVE.L      D6, -(SP)                   ;Push D0
00002348                           619                  
00002348  45F9 00016000            620                  LEA         INPUT, A2
0000234E  207C 00010000            621                  MOVE.L      #$010000, A0                    ;Reset A0
00002354                           622                  
00002354  2F08                     623                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002356                           624                
00002356  307C 2CDF                625                  MOVEA       #CONTENTS,A0                ;Print Output
0000235A  6100 0592                626                  BSR         OUTCHAR               
0000235E                           627                  
0000235E  205F                     628                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002360                           629                  
00002360                           630  
00002360  2486                     631                  MOVE.L      D6, (A2)                   
00002362                           632                  
00002362  109A                     633                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
00002364  4EB9 00002942            634                  JSR         OUTHEX
0000236A                           635  
0000236A  109A                     636                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
0000236C  4EB9 00002942            637                  JSR         OUTHEX
00002372                           638                  
00002372  109A                     639                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
00002374  4EB9 00002942            640                  JSR         OUTHEX
0000237A                           641                  
0000237A  1092                     642                  MOVE.B      (A2), (A0)                  ;1st Byte                              
0000237C  4EB9 00002942            643                  JSR         OUTHEX
00002382                           644                           
00002382  2C1F                     645                  MOVE.L      (SP)+, D6                   ;Pop D0
00002384                           646                  
00002384  2F08                     647                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002386                           648                
00002386  307C 2D77                649                  MOVEA       #NEWLINE,A0                 ;Print Output
0000238A  6100 0562                650                  BSR         OUTCHAR               
0000238E                           651                  
0000238E  205F                     652                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002390                           653  
00002390                           654                  
00002390  4EF8 1F4A                655                  JMP         MAIN
00002394                           656  
00002394                           657  READD7:
00002394  2F07                     658                  MOVE.L      D7, -(SP)                   ;Push D0
00002396                           659                  
00002396  45F9 00016000            660                  LEA         INPUT, A2
0000239C  207C 00010000            661                  MOVE.L      #$010000, A0                    ;Reset A0
000023A2                           662                  
000023A2  2F08                     663                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000023A4                           664                
000023A4  307C 2CDF                665                  MOVEA       #CONTENTS,A0                ;Print Output
000023A8  6100 0544                666                  BSR         OUTCHAR               
000023AC                           667                  
000023AC  205F                     668                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000023AE                           669                  
000023AE                           670  
000023AE  2487                     671                  MOVE.L      D7, (A2)                   
000023B0                           672                  
000023B0  109A                     673                  MOVE.B      (A2)+, (A0)                 ;1st Byte                              
000023B2  4EB9 00002942            674                  JSR         OUTHEX
000023B8                           675  
000023B8  109A                     676                  MOVE.B      (A2)+, (A0)                 ;2nd Byte                              
000023BA  4EB9 00002942            677                  JSR         OUTHEX
000023C0                           678                  
000023C0  109A                     679                  MOVE.B      (A2)+, (A0)                 ;3rd Byte                              
000023C2  4EB9 00002942            680                  JSR         OUTHEX
000023C8                           681                  
000023C8  1092                     682                  MOVE.B      (A2), (A0)                  ;1st Byte                              
000023CA  4EB9 00002942            683                  JSR         OUTHEX
000023D0                           684                           
000023D0  2E1F                     685                  MOVE.L      (SP)+, D7                   ;Pop D0
000023D2                           686                  
000023D2  2F08                     687                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000023D4                           688                
000023D4  307C 2D77                689                  MOVEA       #NEWLINE,A0                 ;Print Output
000023D8  6100 0514                690                  BSR         OUTCHAR               
000023DC                           691                  
000023DC  205F                     692                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000023DE                           693  
000023DE  4EF8 1F4A                694                  JMP         MAIN
000023E2                           695  
000023E2                           696  READA0:
000023E2  2F08                     697                  MOVE.L      A0, -(SP)
000023E4                           698                  
000023E4  307C 2CDF                699                  MOVEA       #CONTENTS,A0                ;Print Output
000023E8  6100 0504                700                  BSR         OUTCHAR 
000023EC                           701                  
000023EC  205F                     702                  MOVE.L      (SP)+, A0
000023EE                           703                  
000023EE  2F08                     704                  MOVE.L      A0, -(SP)
000023F0                           705                  
000023F0  23C8 00010300            706                  MOVE.L      A0, $010300
000023F6                           707                  
000023F6  10B9 00010300            708                  MOVE.B      $010300, (A0)                 ;1st Byte                              
000023FC  4EB9 00002942            709                  JSR         OUTHEX
00002402                           710  
00002402  10B9 00010301            711                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
00002408  4EB9 00002942            712                  JSR         OUTHEX
0000240E                           713                  
0000240E  10B9 00010302            714                  MOVE.B      $10302, (A0)                 ;3rd Byte                              
00002414  4EB9 00002942            715                  JSR         OUTHEX
0000241A                           716                  
0000241A  10B9 00010303            717                  MOVE.B      $10303, (A0)                  ;1st Byte                              
00002420  4EB9 00002942            718                  JSR         OUTHEX
00002426                           719                           
00002426  205F                     720                  MOVE.L      (SP)+, A0                   ;Pop D0
00002428                           721                  
00002428  2F08                     722                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
0000242A                           723                
0000242A  307C 2D77                724                  MOVEA       #NEWLINE,A0                 ;Print Output
0000242E  6100 04BE                725                  BSR         OUTCHAR               
00002432                           726                  
00002432  205F                     727                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002434                           728                 
00002434  4EF8 1F4A                729                  JMP         MAIN
00002438                           730  
00002438                           731  READA1:
00002438  2F08                     732                  MOVE.L      A0, -(SP)
0000243A                           733                  
0000243A  307C 2CDF                734                  MOVEA       #CONTENTS,A0                ;Print Output
0000243E  6100 04AE                735                  BSR         OUTCHAR 
00002442                           736                  
00002442  205F                     737                  MOVE.L      (SP)+, A0
00002444                           738                  
00002444  2F09                     739                  MOVE.L      A1, -(SP)
00002446                           740                  
00002446  23C9 00010300            741                  MOVE.L      A1, $010300
0000244C                           742                  
0000244C  10B9 00010300            743                  MOVE.B      $010300, (A0)                 ;1st Byte                              
00002452  4EB9 00002942            744                  JSR         OUTHEX
00002458                           745  
00002458  10B9 00010301            746                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
0000245E  4EB9 00002942            747                  JSR         OUTHEX
00002464                           748                  
00002464  10B9 00010302            749                  MOVE.B      $010302, (A0)                 ;3rd Byte                              
0000246A  4EB9 00002942            750                  JSR         OUTHEX
00002470                           751                  
00002470  10B9 00010303            752                  MOVE.B      $010303, (A0)                  ;1st Byte                              
00002476  4EB9 00002942            753                  JSR         OUTHEX
0000247C                           754                           
0000247C  225F                     755                  MOVE.L      (SP)+, A1                   ;Pop D0
0000247E                           756                  
0000247E  2F08                     757                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002480                           758                
00002480  307C 2D77                759                  MOVEA       #NEWLINE,A0                 ;Print Output
00002484  6100 0468                760                  BSR         OUTCHAR               
00002488                           761                  
00002488  205F                     762                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
0000248A                           763                                 
0000248A  4EF8 1F4A                764                  JMP         MAIN
0000248E                           765  
0000248E                           766  READA2:
0000248E  2F08                     767                  MOVE.L      A0, -(SP)
00002490                           768                  
00002490  307C 2CDF                769                  MOVEA       #CONTENTS,A0                ;Print Output
00002494  6100 0458                770                  BSR         OUTCHAR 
00002498                           771                  
00002498  205F                     772                  MOVE.L      (SP)+, A0
0000249A                           773                  
0000249A  2F0A                     774                  MOVE.L      A2, -(SP)
0000249C                           775                                  
0000249C  23CA 00010300            776                  MOVE.L      A2, $010300
000024A2                           777                  
000024A2  10B9 00010300            778                  MOVE.B      $010300, (A0)                 ;1st Byte                              
000024A8  4EB9 00002942            779                  JSR         OUTHEX
000024AE                           780  
000024AE  10B9 00010301            781                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
000024B4  4EB9 00002942            782                  JSR         OUTHEX
000024BA                           783                  
000024BA  10B9 00010302            784                  MOVE.B      $010302, (A0)                 ;3rd Byte                              
000024C0  4EB9 00002942            785                  JSR         OUTHEX
000024C6                           786                  
000024C6  10B9 00010303            787                  MOVE.B      $010303, (A0)                  ;1st Byte                              
000024CC  4EB9 00002942            788                  JSR         OUTHEX
000024D2                           789                           
000024D2  245F                     790                  MOVE.L      (SP)+, A2                   ;Pop D0
000024D4                           791                  
000024D4  2F08                     792                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000024D6                           793                
000024D6  307C 2D77                794                  MOVEA       #NEWLINE,A0                 ;Print Output
000024DA  6100 0412                795                  BSR         OUTCHAR               
000024DE                           796                  
000024DE  205F                     797                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000024E0                           798               
000024E0  4EF8 1F4A                799                  JMP         MAIN
000024E4                           800  
000024E4                           801  READA3:
000024E4  2F08                     802                  MOVE.L      A0, -(SP)
000024E6                           803                  
000024E6  307C 2CDF                804                  MOVEA       #CONTENTS,A0                ;Print Output
000024EA  6100 0402                805                  BSR         OUTCHAR 
000024EE                           806                  
000024EE  205F                     807                  MOVE.L      (SP)+, A0
000024F0                           808                  
000024F0  2F0B                     809                  MOVE.L      A3, -(SP)
000024F2                           810                  
000024F2  23CB 00010300            811                  MOVE.L      A3, $010300
000024F8                           812                  
000024F8  10B9 00010300            813                  MOVE.B      $010300, (A0)                 ;1st Byte                              
000024FE  4EB9 00002942            814                  JSR         OUTHEX
00002504                           815  
00002504  10B9 00010301            816                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
0000250A  4EB9 00002942            817                  JSR         OUTHEX
00002510                           818                  
00002510  10B9 00010302            819                  MOVE.B      $010302, (A0)                 ;3rd Byte                              
00002516  4EB9 00002942            820                  JSR         OUTHEX
0000251C                           821                  
0000251C  10B9 00010303            822                  MOVE.B      $010303, (A0)                  ;1st Byte                              
00002522  4EB9 00002942            823                  JSR         OUTHEX
00002528                           824                           
00002528  265F                     825                  MOVE.L      (SP)+, A3                   ;Pop D0
0000252A                           826                  
0000252A  2F08                     827                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
0000252C                           828                
0000252C  307C 2D77                829                  MOVEA       #NEWLINE,A0                 ;Print Output
00002530  6100 03BC                830                  BSR         OUTCHAR               
00002534                           831                  
00002534  205F                     832                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002536                           833  
00002536  4EF8 1F4A                834                  JMP         MAIN
0000253A                           835  
0000253A                           836  READA4:
0000253A  2F08                     837                  MOVE.L      A0, -(SP)
0000253C                           838                  
0000253C  307C 2CDF                839                  MOVEA       #CONTENTS,A0                ;Print Output
00002540  6100 03AC                840                  BSR         OUTCHAR 
00002544                           841                  
00002544  205F                     842                  MOVE.L      (SP)+, A0
00002546                           843                  
00002546  2F0C                     844                  MOVE.L      A4, -(SP)
00002548                           845                  
00002548  23CC 00010300            846                  MOVE.L      A4, $010300
0000254E                           847                  
0000254E  10B9 00010300            848                  MOVE.B      $010300, (A0)                 ;1st Byte                              
00002554  4EB9 00002942            849                  JSR         OUTHEX
0000255A                           850  
0000255A  10B9 00010301            851                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
00002560  4EB9 00002942            852                  JSR         OUTHEX
00002566                           853                  
00002566  10B9 00010302            854                  MOVE.B      $010302, (A0)                 ;3rd Byte                              
0000256C  4EB9 00002942            855                  JSR         OUTHEX
00002572                           856                  
00002572  10B9 00010303            857                  MOVE.B      $010303, (A0)                  ;1st Byte                              
00002578  4EB9 00002942            858                  JSR         OUTHEX
0000257E                           859                           
0000257E  285F                     860                  MOVE.L      (SP)+, A4                   ;Pop D0
00002580                           861                  
00002580  2F08                     862                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002582                           863                
00002582  307C 2D77                864                  MOVEA       #NEWLINE,A0                 ;Print Output
00002586  6100 0366                865                  BSR         OUTCHAR               
0000258A                           866                  
0000258A  205F                     867                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
0000258C                           868  
0000258C  4EF8 1F4A                869                  JMP         MAIN
00002590                           870  
00002590                           871  READA5:
00002590  2F08                     872                  MOVE.L      A0, -(SP)
00002592                           873                  
00002592  307C 2CDF                874                  MOVEA       #CONTENTS,A0                ;Print Output
00002596  6100 0356                875                  BSR         OUTCHAR 
0000259A                           876                  
0000259A  205F                     877                  MOVE.L      (SP)+, A0
0000259C                           878                  
0000259C  2F0D                     879                  MOVE.L      A5, -(SP)
0000259E                           880                  
0000259E  23CD 00010300            881                  MOVE.L      A5, $010300
000025A4                           882                  
000025A4  10B9 00010300            883                  MOVE.B      $010300, (A0)                 ;1st Byte                              
000025AA  4EB9 00002942            884                  JSR         OUTHEX
000025B0                           885  
000025B0  10B9 00010301            886                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
000025B6  4EB9 00002942            887                  JSR         OUTHEX
000025BC                           888                  
000025BC  10B9 00010302            889                  MOVE.B      $010302, (A0)                 ;3rd Byte                              
000025C2  4EB9 00002942            890                  JSR         OUTHEX
000025C8                           891                  
000025C8  10B9 00010303            892                  MOVE.B      $010303, (A0)                  ;1st Byte                              
000025CE  4EB9 00002942            893                  JSR         OUTHEX
000025D4                           894                           
000025D4  2A5F                     895                  MOVE.L      (SP)+, A5                   ;Pop D0
000025D6                           896                  
000025D6  2F08                     897                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
000025D8                           898                
000025D8  307C 2D77                899                  MOVEA       #NEWLINE,A0                 ;Print Output
000025DC  6100 0310                900                  BSR         OUTCHAR               
000025E0                           901                  
000025E0  205F                     902                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
000025E2                           903  
000025E2  4EF8 1F4A                904                  JMP         MAIN
000025E6                           905  
000025E6                           906  READA6:
000025E6  2F08                     907                  MOVE.L      A0, -(SP)
000025E8                           908                  
000025E8  307C 2CDF                909                  MOVEA       #CONTENTS,A0                ;Print Output
000025EC  6100 0300                910                  BSR         OUTCHAR 
000025F0                           911                  
000025F0  205F                     912                  MOVE.L      (SP)+, A0
000025F2                           913                  
000025F2  2F0E                     914                  MOVE.L      A6, -(SP)
000025F4                           915                  
000025F4  23CE 00010300            916                  MOVE.L      A6, $010300
000025FA                           917                  
000025FA  10B9 00010300            918                  MOVE.B      $010300, (A0)                 ;1st Byte                              
00002600  4EB9 00002942            919                  JSR         OUTHEX
00002606                           920  
00002606  10B9 00010301            921                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
0000260C  4EB9 00002942            922                  JSR         OUTHEX
00002612                           923                  
00002612  10B9 00010302            924                  MOVE.B      $010302, (A0)                 ;3rd Byte                              
00002618  4EB9 00002942            925                  JSR         OUTHEX
0000261E                           926                  
0000261E  10B9 00010303            927                  MOVE.B      $010303, (A0)                  ;1st Byte                              
00002624  4EB9 00002942            928                  JSR         OUTHEX
0000262A                           929                           
0000262A  2C5F                     930                  MOVE.L      (SP)+, A6                   ;Pop D0
0000262C                           931                  
0000262C  2F08                     932                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
0000262E                           933                
0000262E  307C 2D77                934                  MOVEA       #NEWLINE,A0                 ;Print Output
00002632  6100 02BA                935                  BSR         OUTCHAR               
00002636                           936                  
00002636  205F                     937                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
00002638                           938   
00002638  4EF8 1F4A                939                  JMP         MAIN
0000263C                           940  
0000263C                           941  READA7:
0000263C  2F08                     942                  MOVE.L      A0, -(SP)
0000263E                           943                  
0000263E  307C 2CDF                944                  MOVEA       #CONTENTS,A0                ;Print Output
00002642  6100 02AA                945                  BSR         OUTCHAR 
00002646                           946                  
00002646  205F                     947                  MOVE.L      (SP)+, A0
00002648                           948                  
00002648  2F0F                     949                  MOVE.L      A7, -(SP)
0000264A                           950                  
0000264A  23CF 00010300            951                  MOVE.L      A7, $010300
00002650                           952                  
00002650  10B9 00010300            953                  MOVE.B      $010300, (A0)                 ;1st Byte                              
00002656  4EB9 00002942            954                  JSR         OUTHEX
0000265C                           955  
0000265C  10B9 00010301            956                  MOVE.B      $010301, (A0)                 ;2nd Byte                              
00002662  4EB9 00002942            957                  JSR         OUTHEX
00002668                           958                  
00002668  10B9 00010302            959                  MOVE.B      $010302, (A0)                 ;3rd Byte                              
0000266E  4EB9 00002942            960                  JSR         OUTHEX
00002674                           961                  
00002674  10B9 00010303            962                  MOVE.B      $010303, (A0)                  ;1st Byte                              
0000267A  4EB9 00002942            963                  JSR         OUTHEX
00002680                           964                           
00002680  2E5F                     965                  MOVE.L      (SP)+, A7                   ;Pop D0
00002682                           966                  
00002682  2F08                     967                  MOVE.L      A0, -(SP)                   ;Pushing A0 to the Stack               
00002684                           968                
00002684  307C 2D77                969                  MOVEA       #NEWLINE,A0                 ;Print Output
00002688  6100 0264                970                  BSR         OUTCHAR               
0000268C                           971                  
0000268C  205F                     972                  MOVE.L      (SP)+, A0                   ;Popping A0 to the Stack
0000268E                           973  
0000268E  4EF8 1F4A                974                  JMP         MAIN
00002692                           975                             
00002692                           976  
00002692                           977  *======================================================================
00002692                           978  *Write to Register Sub-function
00002692                           979  WR:
00002692  4EB8 1FD6                980                  JSR         GET_ARG
00002696                           981                  
00002696  45F9 00016000            982                  LEA         INPUT, A2
0000269C                           983                  
0000269C  2487                     984                  MOVE.L      D7, (A2)
0000269E  5248                     985                  ADD         #$01, A0
000026A0                           986  
000026A0                           987  WR_LOOP:                
000026A0  0C10 0041                988                  CMPI.B      #$41, (A0)
000026A4  6700 000E                989                  BEQ         WR_A
000026A8  0C10 0044                990                  CMPI.B      #$44, (A0)
000026AC  6700 0098                991                  BEQ         WR_D
000026B0  6000 02E6                992                  BRA         ARGUMENT_ERROR
000026B4                           993  
000026B4                           994  *=======================================
000026B4                           995  *Address Register                
000026B4                           996  WR_A:
000026B4                           997                  *Condition Checking                
000026B4  5248                     998                  ADD         #$01, A0
000026B6  0C10 0030                999                  CMPI.B      #$30, (A0)
000026BA  6D00 02DC               1000                  BLT         ARGUMENT_ERROR
000026BE  0C10 0037               1001                  CMPI.B      #$37, (A0)
000026C2  6E00 02D4               1002                  BGT         ARGUMENT_ERROR
000026C6                          1003                  
000026C6                          1004                  *Address Register Checking
000026C6  0C10 0030               1005                  CMPI.B      #$30, (A0)
000026CA  6700 003A               1006                  BEQ         WR_ADDR0                
000026CE  0C10 0031               1007                  CMPI.B      #$31, (A0)
000026D2  6700 003A               1008                  BEQ         WR_ADDR1                
000026D6  0C10 0032               1009                  CMPI.B      #$32, (A0)
000026DA  6700 003A               1010                  BEQ         WR_ADDR2               
000026DE  0C10 0033               1011                  CMPI.B      #$33, (A0)
000026E2  6700 003A               1012                  BEQ         WR_ADDR3                
000026E6  0C10 0034               1013                  CMPI.B      #$34, (A0)
000026EA  6700 003A               1014                  BEQ         WR_ADDR4                
000026EE  0C10 0035               1015                  CMPI.B      #$35, (A0)
000026F2  6700 003A               1016                  BEQ         WR_ADDR5                
000026F6  0C10 0036               1017                  CMPI.B      #$36, (A0)
000026FA  6700 003A               1018                  BEQ         WR_ADDR6                
000026FE  0C10 0037               1019                  CMPI.B      #$37, (A0)
00002702  6700 003A               1020                  BEQ         WR_ADDR7                
00002706                          1021  
00002706                          1022  *Write to Addresss                
00002706                          1023  WR_ADDR0:
00002706  2047                    1024                  MOVE.L      D7, A0
00002708  4EF9 000027D8           1025                  JMP         WR_EXIT               
0000270E                          1026  WR_ADDR1:
0000270E  2247                    1027                  MOVE.L      D7, A1
00002710  4EF9 000027D8           1028                  JMP         WR_EXIT
00002716                          1029  WR_ADDR2:
00002716  2447                    1030                  MOVE.L      D7, A2
00002718  4EF9 000027D8           1031                  JMP         WR_EXIT
0000271E                          1032  WR_ADDR3:
0000271E  2647                    1033                  MOVE.L      D7, A3
00002720  4EF9 000027D8           1034                  JMP         WR_EXIT
00002726                          1035  WR_ADDR4:
00002726  2847                    1036                  MOVE.L      D7, A4
00002728  4EF9 000027D8           1037                  JMP         WR_EXIT
0000272E                          1038  WR_ADDR5:
0000272E  2A47                    1039                  MOVE.L      D7, A5
00002730  4EF9 000027D8           1040                  JMP         WR_EXIT
00002736                          1041  WR_ADDR6:
00002736  2C47                    1042                  MOVE.L      D7, A6
00002738  4EF9 000027D8           1043                  JMP         WR_EXIT
0000273E                          1044  WR_ADDR7:
0000273E  2E47                    1045                  MOVE.L      D7, A7
00002740  4EF9 000027D8           1046                  JMP         WR_EXIT                
00002746                          1047  *=======================================
00002746                          1048  *Data Register
00002746                          1049  WR_D:
00002746                          1050                  *Condition Checking
00002746  5248                    1051                  ADD         #$01, A0
00002748  0C10 0030               1052                  CMPI.B      #$30, (A0)
0000274C  6D00 024A               1053                  BLT         ARGUMENT_ERROR
00002750  0C10 0037               1054                  CMPI.B      #$37, (A0)
00002754  6E00 0242               1055                  BGT         ARGUMENT_ERROR
00002758                          1056                                  
00002758                          1057                  *Data Register Checking
00002758  0C10 0030               1058                  CMPI.B      #$30, (A0)
0000275C  6700 003A               1059                  BEQ         WR_DATA0               
00002760  0C10 0031               1060                  CMPI.B      #$31, (A0)
00002764  6700 003A               1061                  BEQ         WR_DATA1                
00002768  0C10 0032               1062                  CMPI.B      #$32, (A0)
0000276C  6700 003A               1063                  BEQ         WR_DATA2                
00002770  0C10 0033               1064                  CMPI.B      #$33, (A0)
00002774  6700 003A               1065                  BEQ         WR_DATA3
00002778  0C10 0034               1066                  CMPI.B      #$34, (A0)
0000277C  6700 003A               1067                  BEQ         WR_DATA4                
00002780  0C10 0035               1068                  CMPI.B      #$35, (A0)
00002784  6700 003A               1069                  BEQ         WR_DATA5               
00002788  0C10 0036               1070                  CMPI.B      #$36, (A0)
0000278C  6700 003A               1071                  BEQ         WR_DATA6                
00002790  0C10 0037               1072                  CMPI.B      #$37, (A0)
00002794  6700 003A               1073                  BEQ         WR_DATA7
00002798                          1074  
00002798                          1075  *Write to Data                 
00002798                          1076  WR_DATA0:
00002798  2007                    1077                  MOVE.L      D7, D0                                
0000279A  4EF9 000027D8           1078                  JMP         WR_EXIT
000027A0                          1079  WR_DATA1:                
000027A0  2207                    1080                  MOVE.L      D7, D1
000027A2  4EF9 000027D8           1081                  JMP         WR_EXIT
000027A8                          1082  WR_DATA2:                
000027A8  2407                    1083                  MOVE.L      D7, D2
000027AA  4EF9 000027D8           1084                  JMP         WR_EXIT
000027B0                          1085  WR_DATA3:                
000027B0  2607                    1086                  MOVE.L      D7, D3
000027B2  4EF9 000027D8           1087                  JMP         WR_EXIT
000027B8                          1088  WR_DATA4:                
000027B8  2807                    1089                  MOVE.L      D7, D4
000027BA  4EF9 000027D8           1090                  JMP         WR_EXIT
000027C0                          1091  WR_DATA5:                
000027C0  2A07                    1092                  MOVE.L      D7, D5
000027C2  4EF9 000027D8           1093                  JMP         WR_EXIT
000027C8                          1094  WR_DATA6:                
000027C8  2C07                    1095                  MOVE.L      D7, D6
000027CA  4EF9 000027D8           1096                  JMP         WR_EXIT
000027D0                          1097  WR_DATA7:                
000027D0  2E07                    1098                  MOVE.L      D7, D7
000027D2  4EF9 000027D8           1099                  JMP         WR_EXIT                
000027D8                          1100                  
000027D8                          1101  WR_EXIT:
000027D8  2F08                    1102                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
000027DA                          1103                
000027DA  307C 2CEC               1104                  MOVEA       #OUTPUT_WM ,A0                      ;Print Output
000027DE  6100 010E               1105                  BSR         OUTCHAR
000027E2                          1106  
000027E2  307C 2D77               1107                  MOVEA       #NEWLINE,A0                         ;Print New Line
000027E6  6100 0106               1108                  BSR         OUTCHAR               
000027EA                          1109                  
000027EA  205F                    1110                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack
000027EC                          1111                  
000027EC  4EF8 1F4A               1112                  JMP         MAIN
000027F0                          1113  
000027F0                          1114      
000027F0                          1115  *======================================================================
000027F0                          1116  *Load S-Record Sub-function
000027F0                          1117  LS:
000027F0                          1118                  *Condition Check and Setup
000027F0  5248                    1119                  ADD         #$01, A0
000027F2  43F9 00015000           1120                  LEA         SRECADDR, A1
000027F8  45F9 00015500           1121                  LEA         SRECSTART, A2
000027FE                          1122                  
000027FE  7400                    1123                  MOVEQ       #$00, D2                            ;D2 is Count Byte
00002800  7600                    1124                  MOVEQ       #$00, D3
00002802  7E00                    1125                  MOVEQ       #$00, D7                            ;D7 is address
00002804  7C00                    1126                  MOVEQ       #$00, D6
00002806                          1127                 
00002806                          1128                  
00002806  0C10 0053               1129                  CMPI.B      #$53, (A0)                          ;Compare to "S"
0000280A  6700 0006               1130                  BEQ         SVALID             
0000280E  6000 0188               1131                  BRA         ARGUMENT_ERROR               
00002812                          1132  
00002812                          1133  SVALID:
00002812  5248                    1134                  ADD         #$01, A0                            ;Checking the next bytes of A0
00002814  0C10 0030               1135                  CMPI.B      #$30, (A0)
00002818  6D00 017E               1136                  BLT         ARGUMENT_ERROR
0000281C  0C10 0039               1137                  CMPI.B      #$39, (A0)
00002820  6E00 0176               1138                  BGT         ARGUMENT_ERROR
00002824                          1139                  
00002824  0C10 0031               1140                  CMPI.B      #$31, (A0)
00002828  6700 0006               1141                  BEQ         SCOUNT
0000282C  6000 0044               1142                  BRA         SRECLIM
00002830                          1143                  
00002830                          1144  SCOUNT:                
00002830  4EB9 00002894           1145                  JSR         READBYTES 
00002836  2407                    1146                  MOVE.L      D7, D2                              ;Move S-Record Count to D2
00002838                          1147                                                                  
00002838                          1148  SADDR:
00002838  4EB9 00002894           1149                  JSR         READBYTES
0000283E  12C7                    1150                  MOVE.B      D7, (A1)+
00002840                          1151                  
00002840  4EB9 00002894           1152                  JSR         READBYTES
00002846  12C7                    1153                  MOVE.B      D7, (A1)+
00002848                          1154                  
00002848  5502                    1155                  SUB.B       #$02, D2
0000284A                          1156                      
0000284A                          1157  SDATA:                
0000284A  4EB9 00002894           1158                  JSR         READBYTES
00002850  14C7                    1159                  MOVE.B      D7, (A2)+
00002852  5302                    1160                  SUB.B       #$01, D2
00002854  0C02 0001               1161                  CMPI.B      #$01, D2
00002858  66F0                    1162                  BNE         SDATA
0000285A                          1163                                       
0000285A                          1164  LS_EXIT:
0000285A  2F08                    1165                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
0000285C                          1166                
0000285C  307C 2CFF               1167                  MOVEA       #OUTPUT_LS ,A0                      ;Print Output
00002860  6100 008C               1168                  BSR         OUTCHAR
00002864                          1169  
00002864  307C 2D77               1170                  MOVEA       #NEWLINE,A0                         ;Print New Line
00002868  6100 0084               1171                  BSR         OUTCHAR               
0000286C                          1172                  
0000286C  205F                    1173                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack                
0000286E                          1174                  
0000286E  4EF8 1F4A               1175                  JMP         MAIN
00002872                          1176  
00002872                          1177  SRECLIM:
00002872  2F08                    1178                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
00002874                          1179                  
00002874  307C 2D1A               1180                  MOVEA       #SRECLIM_MSG,A0
00002878  6100 0074               1181                  BSR         OUTCHAR
0000287C                          1182  
0000287C  307C 2D77               1183                  MOVEA       #NEWLINE,A0                         ;Print New Line
00002880  6100 006C               1184                  BSR         OUTCHAR                
00002884                          1185                  
00002884  205F                    1186                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack
00002886                          1187  
00002886  4EF8 1F4A               1188                  JMP         MAIN
0000288A                          1189  
0000288A                          1190  
0000288A                          1191  *======================================================================
0000288A                          1192  *Run S-Record Sub-function
0000288A                          1193  RS:
0000288A  4EB9 00015500           1194                  JSR         SRECSTART
00002890                          1195                  
00002890  4EF8 1F4A               1196                  JMP         MAIN        
00002894                          1197  
00002894                          1198  *======================================================================
00002894                          1199  *Read Hex Byte
00002894                          1200  READBYTES:
00002894  7E00                    1201                  MOVEQ       #$00, D7                            ;D7 is address
00002896  7C00                    1202                  MOVEQ       #$00, D6
00002898  7800                    1203                  MOVEQ       #$00, D4
0000289A                          1204  
0000289A                          1205  READBYTES_LOOP:                
0000289A  5248                    1206                  ADD         #$01, A0
0000289C                          1207  
0000289C  1C10                    1208                  MOVE.B      (A0), D6
0000289E  0C06 0039               1209                  CMPI.B      #$39, D6
000028A2  6F00 0004               1210                  BLE         READ_NUMBYTES
000028A6  5F06                    1211                  SUBQ.B      #$07, D6
000028A8                          1212  
000028A8                          1213  READ_NUMBYTES:
000028A8  0406 0030               1214                  SUB.B       #$30, D6
000028AC  E99F                    1215                  ROL.L       #4, D7
000028AE  DE86                    1216                  ADD.L       D6, D7
000028B0                          1217                  
000028B0                          1218                                                                 
000028B0  5244                    1219                  ADDI        #$01, D4
000028B2  0C04 0002               1220                  CMPI.B      #$02, D4
000028B6  6700 0004               1221                  BEQ         GOT_BYTES
000028BA  60DE                    1222                  BRA         READBYTES_LOOP        
000028BC                          1223  
000028BC                          1224  GOT_BYTES:
000028BC  4E75                    1225                  RTS
000028BE                          1226  
000028BE                          1227                   
000028BE                          1228  *======================================================================
000028BE                          1229  *Input character
000028BE                          1230  INCHAR:
000028BE  2F01                    1231                  MOVE.L      D1, -(SP)
000028C0  2F00                    1232                  MOVE.L      D0, -(SP)
000028C2                          1233  
000028C2                          1234  INCHAR_LOOP:                                               
000028C2                          1235  *                MOVE.B      #5, D0
000028C2                          1236  *                TRAP        #15
000028C2  6100 006E               1237                  BSR         in_Char
000028C6                          1238                  
000028C6  0C01 000D               1239                  CMPI.B      #CR, D1                               ;If input equals to Carriage Return
000028CA  6716                    1240                  BEQ.S       END_INCHAR_LOOP                       ;Exit getting input from Character
000028CC                          1241                  
000028CC  0C01 0008               1242                  CMPI.B      #BS, D1                               ;If input equals to backspace
000028D0  670A                    1243                  BEQ.S       INCHAR_BS                             ;Delete
000028D2                          1244                                                                                  
000028D2  10C1                    1245                  MOVE.B      D1, (A0)+                             ;Move Input Byte Value of D1 to A0 then
000028D4                          1246                                                                    ;increment the address
000028D4  60EC                    1247                  BRA         INCHAR_LOOP    
000028D6                          1248  
000028D6                          1249  INCHAR_SPACE:
000028D6  113C 0000               1250                  MOVE.B      #0, -(A0)
000028DA  60E6                    1251                  BRA         INCHAR_LOOP
000028DC                          1252  
000028DC                          1253  INCHAR_BS:
000028DC  113C 0000               1254                  MOVE.B      #0, -(A0)
000028E0  60E0                    1255                  BRA         INCHAR_LOOP        
000028E2                          1256  
000028E2                          1257  END_INCHAR_LOOP:
000028E2  207C 00010000           1258                  MOVE.L      #$010000, A0
000028E8  201F                    1259                  MOVE.L      (SP)+, D0
000028EA  221F                    1260                  MOVE.L      (SP)+, D1
000028EC  4E75                    1261                  RTS
000028EE                          1262                      
000028EE                          1263  *Output Character
000028EE                          1264  OUTCHAR:
000028EE  2F01                    1265                  MOVE.L      D1, -(SP)
000028F0  2F00                    1266                  MOVE.L      D0, -(SP)
000028F2                          1267                       
000028F2                          1268  OUTCHAR_LOOP:                
000028F2  1218                    1269                  MOVE.B      (A0)+, D1
000028F4  0C01 0000               1270                  CMPI.B      #0, D1
000028F8  6706                    1271                  BEQ.S       END_OUTCHAR_LOOP                                
000028FA                          1272  *                MOVE.B      #6, D0
000028FA                          1273  *                TRAP        #15
000028FA  6100 0028               1274                  BSR         out_Char
000028FE  60F2                    1275                  BRA         OUTCHAR_LOOP
00002900                          1276                                   
00002900                          1277  END_OUTCHAR_LOOP:
00002900  201F                    1278                  MOVE.L      (SP)+, D0
00002902  221F                    1279                  MOVE.L      (SP)+, D1
00002904  4E75                    1280                  RTS
00002906                          1281                  
00002906                          1282  *======================================================================                
00002906                          1283  *Output Address:
00002906                          1284  OUTADDR:
00002906  2F01                    1285                  MOVE.L      D1, -(SP)
00002908  2F00                    1286                  MOVE.L      D0, -(SP)
0000290A  49F9 00016500           1287                  LEA         OUTPUT, A4
00002910                          1288                       
00002910                          1289  OUTADDR_LOOP:                
00002910  121C                    1290                  MOVE.B      (A4)+, D1
00002912  0C01 0020               1291                  CMPI.B      #SPACE, D1
00002916  67E8                    1292                  BEQ.S       END_OUTCHAR_LOOP                                
00002918                          1293  *                MOVE.B      #6, D0
00002918                          1294  *                TRAP        #15
00002918  6100 000A               1295                  BSR         out_Char                                
0000291C  60F2                    1296                  BRA         OUTADDR_LOOP
0000291E                          1297                                   
0000291E                          1298  END_OUTADDR_LOOP:
0000291E  201F                    1299                  MOVE.L      (SP)+, D0
00002920  221F                    1300                  MOVE.L      (SP)+, D1
00002922  4E75                    1301                  RTS     
00002924                          1302  *====================================================================== 
00002924                          1303  * Writes a character to Port A, blocking if not ready (Full buffer)
00002924                          1304  *  - Takes a character in D0
00002924                          1305  out_Char:   
00002924  082E 0002 0003          1306                  BTST        #Tx_ready, SRA(A6)  ; Check if Tx ready 
0000292A  67F8                    1307                  BEQ         out_char    ; If not then wait
0000292C  1D41 0007               1308                  MOVE.B      D1, HRA(A6) ; Put char from D1 into Tx Holding
00002930  4E75                    1309                  RTS
00002932                          1310  *****
00002932                          1311  * Reads in a character from Port A, blocking if none available
00002932                          1312  *  - Returns character in D0
00002932                          1313  *    
00002932                          1314  in_Char:
00002932  082E 0000 0003          1315                  BTST        #Rx_ready, SRA(A6)                  ; Check if Rx has input
00002938  67F8                    1316                  BEQ         in_Char                             ; If not then wait
0000293A  122E 0007               1317                  MOVE.B      HRA(A6), D1
0000293E  61E4                    1318                  BSR         out_Char                            ; Immediately display on screen                         
00002940  4E75                    1319                  RTS         
00002942                          1320  
00002942                          1321  *======================================================================                 
00002942                          1322  *Print Hex Byte
00002942                          1323  OUTHEX:
00002942  7800                    1324                  MOVEQ       #$00, D4               
00002944  7A00                    1325                  MOVEQ       #$00, D5
00002946                          1326                  
00002946  1810                    1327                  MOVE.B      (A0), D4              
00002948  E80C                    1328                  LSR.B       #$04, D4                ;D4 = Lower Bit
0000294A                          1329                  
0000294A  0604 0030               1330                  ADD.B       #$30, D4
0000294E  B83C 0039               1331                  CMP.B       #$39, D4
00002952                          1332                  
00002952  6F0A                    1333                  BLE.S       OUTHEX_BYTE2
00002954  5E04                    1334                  ADD.B       #7, D4
00002956  B83C 0046               1335                  CMP.B       #$46, D4
0000295A  6E00 002C               1336                  BGT         ERROR 
0000295E                          1337                  
0000295E                          1338  OUTHEX_BYTE2:
0000295E  1A10                    1339                  MOVE.B      (A0), D5
00002960  E90D                    1340                  LSL.B       #$04, D5                ;D5 = Higher Bits
00002962  E91D                    1341                  ROL.B       #$04, D5
00002964                          1342                  
00002964  0605 0030               1343                  ADD.B       #$30, D5
00002968  BA3C 0039               1344                  CMP.B       #$39, D5
0000296C  6F0A                    1345                  BLE.S       OUTHEX_NEXT
0000296E  5E05                    1346                  ADD.B       #7, D5
00002970  BA3C 0046               1347                  CMP.B       #$46, D5
00002974  6E00 0012               1348                  BGT         ERROR
00002978                          1349  
00002978                          1350  OUTHEX_NEXT:                
00002978  49F9 00016500           1351                  LEA         OUTPUT, A4                 
0000297E  18C4                    1352                  MOVE.B      D4, (A4)+
00002980  1885                    1353                  MOVE.B      D5, (A4)
00002982  4EB8 2906               1354                  JSR         OUTADDR                
00002986                          1355                                                                 
00002986                          1356  END_OUTHEX:
00002986  4E75                    1357                  RTS
00002988                          1358                                               
00002988                          1359  *======================================================================
00002988                          1360  *Error Code
00002988                          1361  ERROR:
00002988  2F08                    1362                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
0000298A                          1363                  
0000298A  307C 2D33               1364                  MOVEA       #ERROR_MSG,A0
0000298E  6100 FF5E               1365                  BSR         OUTCHAR               
00002992                          1366                  
00002992  205F                    1367                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack
00002994                          1368  
00002994  4EF8 1F4A               1369                  JMP         MAIN
00002998                          1370                  
00002998                          1371  *Error Code
00002998                          1372  ARGUMENT_ERROR:
00002998  2F08                    1373                  MOVE.L      A0, -(SP)                           ;Pushing A0 to the Stack               
0000299A                          1374                  
0000299A  307C 2D41               1375                  MOVEA       #ARG_ERR_MSG,A0
0000299E  6100 FF4E               1376                  BSR         OUTCHAR               
000029A2                          1377                  
000029A2  205F                    1378                  MOVE.L      (SP)+, A0                           ;Popping A0 to the Stack
000029A4                          1379  
000029A4  4EF8 1F4A               1380                  JMP         MAIN
000029A8                          1381                          
000029A8                          1382  *=======================================================================        
000029A8                          1383  *String Variables
000029A8                          1384  MONITOR:
000029A8= 36 38 30 30 30 20 ...   1385                  DC.B            '68000 Microcontroller Monitor Program [Version 1.0]', CR, LF
000029DD= 42 75 69 6C 74 20 ...   1386                  DC.B            'Built Date: 4.13.2022', CR, LF
000029F4= 44 65 76 65 6C 6F ...   1387                  DC.B            'Developer: Duc Anh Nguyen', CR, LF, 0
00002A10                          1388                  
00002A10                          1389  MENU_LIST:           
00002A10= 20 20 4D 45 4D 4F ...   1390                  DC.B            '  MEMORY MAP'           , CR, LF
00002A1E= 7C 7C 20 20 30 30 ...   1391                  DC.B            '||  00000  ||'         , CR,LF
00002A2D= 7C 7C 20 20 20 2E ...   1392                  DC.B            '||   ...   || ROM'     , CR,LF
00002A40= 7C 7C 20 20 30 46 ...   1393                  DC.B            '||  0FFFF  ||'         , CR,LF
00002A4F= 7C 7C 20 20 31 30 ...   1394                  DC.B            '||  10000  ||'         , CR,LF
00002A5E= 7C 7C 20 20 20 2E ...   1395                  DC.B            '||   ...   || RAM '    , CR,LF
00002A72= 7C 7C 20 20 31 46 ...   1396                  DC.B            '||  1FFFF  ||'         , CR,LF
00002A81= 7C 7C 20 20 32 30 ...   1397                  DC.B            '||  20000  ||'         , CR,LF
00002A90= 7C 7C 20 20 20 2E ...   1398                  DC.B            '||   ...   || DUART'   , CR,LF
00002AA5= 7C 7C 20 20 32 30 ...   1399                  DC.B            '||  2000F  ||'         , CR,LF, 0                 
00002AB5                          1400  
00002AB5                          1401  COMMAND_LIST:
00002AB5= 6D 61 70 20 00          1402                  DC.B            'map ', 0
00002ABA= 68 65 6C 70 20 00       1403                  DC.B            'help ', 0
00002AC0= 72 6D 20 00             1404                  DC.B            'rm ', 0
00002AC4= 77 6D 20 00             1405                  DC.B            'wm ', 0
00002AC8= 72 72 20 00             1406                  DC.B            'rr ', 0
00002ACC= 77 72 20 00             1407                  DC.B            'wr ', 0
00002AD0= 6C 73 20 00             1408                  DC.B            'ls ', 0
00002AD4= 72 73 20 00             1409                  DC.B            'rs ', 0
00002AD8                          1410                
00002AD8                          1411  *Help Display
00002AD8                          1412  MENU_HELP:
00002AD8= 6D 61 70 3A 20 64 ...   1413                  DC.B            'map: display the memory map of the program ', CR, LF
00002B05= 68 65 6C 70 3A 20 ...   1414                  DC.B            'help: display instructions for commands ', CR, LF
00002B2F= 65 78 69 74 3A 20 ...   1415                  DC.B            'exit: terminate the monitor program ', CR, LF 
00002B55= 0D 0A                   1416                  DC.B             CR,LF                              
00002B57                          1417                  
00002B57= 72 6D 3A 20 72 65 ...   1418                  DC.B            'rm: read from memory ', CR, LF
00002B6E= 65 2E 67 2E 20 72 ...   1419                  DC.B            'e.g. rm $<ADDR> ', CR, LF
00002B80= 0D 0A                   1420                  DC.B             CR,LF 
00002B82                          1421                  
00002B82= 77 6D 3A 20 77 72 ...   1422                  DC.B            'wm: write to memory. NOTE: You can only write to RAM location. type <MAP> for memory mapping', CR, LF
00002BE0= 65 2E 67 2E 20 77 ...   1423                  DC.B            'e.g. wm $<CONTENT> $<LOCATION> ', CR, LF
00002C01= 0D 0A                   1424                  DC.B             CR,LF 
00002C03                          1425                  
00002C03= 72 72 3A 20 72 65 ...   1426                  DC.B            'rr: read from register ', CR, LF
00002C1C= 65 2E 67 2E 20 72 ...   1427                  DC.B            'e.g. rr <REGISTER> ', CR, LF
00002C31= 0D 0A                   1428                  DC.B             CR,LF 
00002C33                          1429                  
00002C33= 77 72 3A 20 77 72 ...   1430                  DC.B            'wr: write to register. NOTE: A0, A5, A6, and A7 are preserved ', CR, LF
00002C73= 65 2E 67 2E 20 77 ...   1431                  DC.B            'e.g. wr $<CONTENT> <REGISTER> ', CR, LF
00002C93= 0D 0A                   1432                  DC.B             CR,LF 
00002C95                          1433                  
00002C95= 6C 73 3A 20 6C 6F ...   1434                  DC.B            'ls: load S-Record ', CR, LF
00002CA9= 65 2E 67 2E 20 6C ...   1435                  DC.B            'e.g. ls <S-RECORD>', CR, LF
00002CBD= 0D 0A                   1436                  DC.B             CR,LF 
00002CBF                          1437                  
00002CBF= 72 73 3A 20 72 75 ...   1438                  DC.B            'rs: run S-Record ', CR, LF 
00002CD2= 65 2E 67 2E 20 72 ...   1439                  DC.B            'e.g. rs', CR, LF, 0
00002CDC                          1440  
00002CDC                          1441  *Prompt
00002CDC                          1442  PROMPT:
00002CDC= 3E 20 00                1443                  DC.B            '> ', 0
00002CDF                          1444                
00002CDF                          1445  CONTENTS:
00002CDF= 43 6F 6E 74 65 6E ...   1446                  DC.B            'Contents: ', CR, LF, 0 
00002CEC                          1447  
00002CEC                          1448  OUTPUT_WM:
00002CEC= 57 72 69 74 65 20 ...   1449                  DC.B            'Write Successfully', 0                
00002CFF                          1450  
00002CFF                          1451  OUTPUT_LS:
00002CFF= 4C 6F 61 64 20 53 ...   1452                  DC.B            'Load S-Record Successfully',0
00002D1A                          1453  
00002D1A                          1454  SRECLIM_MSG:
00002D1A= 53 2D 52 65 63 6F ...   1455                  DC.B            'S-Record only accepts S1', 0
00002D33                          1456  
00002D33                          1457  *Error Messgae
00002D33                          1458  ERROR_MSG:
00002D33= 57 72 6F 6E 67 20 ...   1459                  DC.B            'Wrong Input', CR, LF, 0
00002D41                          1460  
00002D41                          1461  ARG_ERR_MSG:
00002D41= 41 72 67 75 6D 65 ...   1462                  DC.B            'Argument were incorrect, type <HELP> for formatting', CR,LF, 0            
00002D77                          1463  
00002D77                          1464  *New Line
00002D77                          1465  NEWLINE:        
00002D77= 0D 0A 00                1466                  DC.B            CR, LF, 0
00002D7A                          1467  
00002D7A                          1468  *End Program
00002D7A                          1469  *=======================================================================
00002D7A                          1470                  END             initDuart        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACR                 9
ACR_BAUD            80
ADD_ARG             1FE4
ARGUMENT_ERROR      2998
ARG_ERR_MSG         2D41
BS                  8
COMMAND_ADDRESS     8
COMMAND_LIST        2AB5
CONTENTS            2CDF
CR                  D
CRA                 5
CR_ENABL            5
CSRA                3
CSR_BAUD            CC
DUART               20000
END_INCHAR_LOOP     28E2
END_OUTADDR_LOOP    291E
END_OUTCHAR_LOOP    2900
END_OUTHEX          2986
ERROR               2988
ERROR_MSG           2D33
FIND_NEXT           1FC2
GET_ARG             1FD6
GOT_ARG             2014
GOT_BYTES           28BC
HELP                2026
HRA                 7
INCHAR              28BE
INCHAR_BS           28DC
INCHAR_LOOP         28C2
INCHAR_SPACE        28D6
INITDUART           1F00
INPUT               16000
INPUT_HANDLER       1FA0
IN_CHAR             2932
LF                  A
LOOP                1FA0
LS                  27F0
LS_EXIT             285A
MAIN                1F4A
MENU                2016
MENU_HELP           2AD8
MENU_LIST           2A10
MONITOR             29A8
MR1_SET             13
MR2_ECHO            47
MR2_NORM            7
MRA                 1
MRA_RST             10
NEWLINE             2D77
NUM                 1FF6
OUTADDR             2906
OUTADDR_LOOP        2910
OUTCHAR             28EE
OUTCHAR_LOOP        28F2
OUTHEX              2942
OUTHEX_BYTE2        295E
OUTHEX_NEXT         2978
OUTPUT              16500
OUTPUT_LS           2CFF
OUTPUT_WM           2CEC
OUT_CHAR            2924
POP                 1FBC
PROMPT              2CDC
READA0              23E2
READA1              2438
READA2              248E
READA3              24E4
READA4              253A
READA5              2590
READA6              25E6
READA7              263C
READBYTES           2894
READBYTES_LOOP      289A
READD0              2172
READD1              21C0
READD2              220E
READD3              225C
READD4              22AA
READD5              22F8
READD6              2346
READD7              2394
READ_NUMBYTES       28A8
REGISTER_CHECK      20B6
RM                  2036
RR                  20B4
RR_A                20CA
RR_D                2120
RS                  288A
RXA_RST             20
RX_READY            0
SADDR               2838
SCOUNT              2830
SDATA               284A
SPACE               20
SPACE_LOOP0         1F52
SPACE_LOOP4         1F6A
SRA                 3
SRECADDR            15000
SRECLIM             2872
SRECLIM_MSG         2D1A
SRECSTART           15500
STACK               13000
SVALID              2812
TXA_RST             30
TX_READY            2
WM                  2084
WR                  2692
WR_A                26B4
WR_ADDR0            2706
WR_ADDR1            270E
WR_ADDR2            2716
WR_ADDR3            271E
WR_ADDR4            2726
WR_ADDR5            272E
WR_ADDR6            2736
WR_ADDR7            273E
WR_D                2746
WR_DATA0            2798
WR_DATA1            27A0
WR_DATA2            27A8
WR_DATA3            27B0
WR_DATA4            27B8
WR_DATA5            27C0
WR_DATA6            27C8
WR_DATA7            27D0
WR_EXIT             27D8
WR_LOOP             26A0
